<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cube.Core</name>
    </assembly>
    <members>
        <member name="T:Cube.Getter`1">
            
             Getter
            
             <summary>
             Represents the delegation to get a value of type T.
             </summary>
            
        </member>
        <member name="T:Cube.Setter`1">
            
             Setter
            
             <summary>
             Represents the delegation to set a value of type T.
             </summary>
            
        </member>
        <member name="T:Cube.Accessor`1">
            
             Accessor
            
             <summary>
             Provides functionality to get and set a value of type T.
             </summary>
            
        </member>
        <member name="M:Cube.Accessor`1.#ctor">
            
             Accessor
            
             <summary>
             Initializes a new instance of the Accessor class.
             </summary>
            
        </member>
        <member name="M:Cube.Accessor`1.#ctor(`0)">
            
             Accessor
            
             <summary>
             Initializes a new instance of the Accessor class with the
             specified value.
             </summary>
            
             <param name="value">Initial value.</param>
            
        </member>
        <member name="M:Cube.Accessor`1.#ctor(`0,System.Collections.Generic.IEqualityComparer{`0})">
            
             Accessor
            
             <summary>
             Initializes a new instance of the Accessor class with the
             specified delegations.
             </summary>
            
             <param name="value">Initial value.</param>
             <param name="comparer">Object to compare two values.</param>
            
        </member>
        <member name="M:Cube.Accessor`1.#ctor(Cube.Getter{`0})">
            
             Accessor
            
             <summary>
             Initializes a new instance of the Accessor class with the
             specified delegation.
             </summary>
            
             <param name="getter">Function to get a value.</param>
            
             <remarks>
             Throws InvalidOperationException when the Set method is invoked.
             </remarks>
            
        </member>
        <member name="M:Cube.Accessor`1.#ctor(Cube.Getter{`0},Cube.Setter{`0})">
            
             Accessor
            
             <summary>
             Initializes a new instance of the Accessor class with the
             specified delegations.
             </summary>
            
             <param name="getter">Function to get a value.</param>
             <param name="setter">Function to set a value.</param>
            
        </member>
        <member name="M:Cube.Accessor`1.#ctor(Cube.Getter{`0},Cube.Setter{`0},System.Collections.Generic.IEqualityComparer{`0})">
            
             Accessor
            
             <summary>
             Initializes a new instance of the Accessor class with the
             specified delegations.
             </summary>
            
             <param name="getter">Function to get a value.</param>
             <param name="setter">Function to set a value.</param>
             <param name="comparer">Object to compare two values.</param>
            
        </member>
        <member name="M:Cube.Accessor`1.Get">
            
             Get
            
             <summary>
             Get a value.
             </summary>
            
             <returns>Result of the provided Getter(T) delegation.</returns>
            
        </member>
        <member name="M:Cube.Accessor`1.Set(`0)">
            
             Get
            
             <summary>
             Set a new value.
             </summary>
            
             <param name="value">Value to be set.</param>
            
             <returns>
             Value indicating whether to be executed the provided Setter(T)
             delegation.
             </returns>
            
        </member>
        <member name="T:Cube.Aggregator">
            
             Aggregator
            
             <summary>
             Represents the type based message aggregator.
             </summary>
            
        </member>
        <member name="M:Cube.Aggregator.Publish(System.Object)">
            
             Publish
            
             <summary>
             Publishes the specified message.
             </summary>
            
             <param name="message">Message to be published.</param>
            
             <remarks>
             Type of the specified object is used for selecting the subscriber.
             </remarks>
            
        </member>
        <member name="M:Cube.Aggregator.Subscribe``1(System.Action{``0})">
            
             Subscribe
            
             <summary>
             Subscribes the message of type T.
             </summary>
            
             <typeparam name="T">Message type.</typeparam>
            
             <param name="callback">
             Callback function for the message of type T.
             </param>
            
             <returns>Object to clear the subscription.</returns>
            
        </member>
        <member name="T:Cube.Collections.Argument">
            
             Argument
            
             <summary>
             Specifies prefix kinds of optional parameters.
             </summary>
            
        </member>
        <member name="F:Cube.Collections.Argument.Posix">
            <summary>Allows only the '-' prefix, and option names are all one character.</summary>
        </member>
        <member name="F:Cube.Collections.Argument.Gnu">
            <summary>Allows '-' and '--' prefix, the latter is known as long-named options.</summary>
        </member>
        <member name="F:Cube.Collections.Argument.Dos">
            <summary>Allows only the '/' prefix, and treated as long-named options.</summary>
        </member>
        <member name="F:Cube.Collections.Argument.Windows">
            <summary>Allows '/', '-', and '--' prefix, and all of them are treated as long-named options.</summary>
        </member>
        <member name="T:Cube.Collections.ArgumentExtension">
            
             ArgumentExtension
            
             <summary>
             Provides extended methods of the Argument enumeration.
             </summary>
            
        </member>
        <member name="P:Cube.Collections.ArgumentExtension.Map">
            
             Map
            
             <summary>
             Gets the map of Argument values and preprocessors.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.ArgumentExtension.Get(Cube.Collections.Argument)">
            
             Get
            
             <summary>
             Gets the preprocessor from the specified kind.
             </summary>
            
        </member>
        <member name="T:Cube.Collections.ArgumentCollection">
            
             ArgumentCollection
            
             <summary>
             Provides functionality to parse arguments.
             </summary>
            
             <remarks>
             このクラスでは、各オプションは最大 1 つの引数しか指定できないと言う
             制約を設けています。それ以外の引数は全て自身のシーケンスに格納され
             ます。また、同じオプションが複数回指定された場合、後に指定された
             内容で上書きされます。
             </remarks>
            
        </member>
        <member name="M:Cube.Collections.ArgumentCollection.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            
             ArgumentCollection
            
             <summary>
             Initializes a new instance of the ArgumentCollection class with
             the specified arguments.
             </summary>
            
             <param name="src">Source arguments.</param>
            
        </member>
        <member name="M:Cube.Collections.ArgumentCollection.#ctor(System.Collections.Generic.IEnumerable{System.String},Cube.Collections.Argument)">
            
             ArgumentCollection
            
             <summary>
             Initializes a new instance of the ArgumentCollection class with
             the specified arguments.
             </summary>
            
             <param name="src">Source arguments.</param>
             <param name="kind">Prefix kind of optional parameters.</param>
            
        </member>
        <member name="M:Cube.Collections.ArgumentCollection.#ctor(System.Collections.Generic.IEnumerable{System.String},Cube.Collections.Argument,System.Boolean)">
            
             ArgumentCollection
            
             <summary>
             Initializes a new instance of the ArgumentCollection class with
             the specified arguments.
             </summary>
            
             <param name="src">Source arguments.</param>
             <param name="kind">Prefix kind of optional parameters.</param>
             <param name="ignoreCase">
             Value indicating whether to ignore the case of optional keys.
             </param>
            
        </member>
        <member name="M:Cube.Collections.ArgumentCollection.#ctor(System.Collections.Generic.IEnumerable{System.String},Cube.Collections.IArgumentPreprocessor,System.Boolean)">
            
             ArgumentCollection
            
             <summary>
             Initializes a new instance of the ArgumentCollection class with
             the specified arguments.
             </summary>
            
             <param name="src">Source arguments.</param>
            
             <param name="preprocessor">
             Object to be invoked before parsing.
             </param>
            
             <param name="ignoreCase">
             Value indicating whether to ignore the case of optional keys.
             </param>
            
        </member>
        <member name="P:Cube.Collections.ArgumentCollection.IgnoreCase">
            
             IgnoreCase
            
             <summary>
             Gets the value indicating whether to ignore the case of optional
             keys.
             </summary>
            
        </member>
        <member name="P:Cube.Collections.ArgumentCollection.Item(System.Int32)">
            
             Item(int)
            
             <summary>
             Gets the collection of arguments except for optional parameters.
             </summary>
            
        </member>
        <member name="P:Cube.Collections.ArgumentCollection.Count">
            
             Count
            
             <summary>
             Gets the number of arguments except for optional parameters.
             </summary>
            
        </member>
        <member name="P:Cube.Collections.ArgumentCollection.Options">
            
             Options
            
             <summary>
             Gets the collection of optional parameters.
             </summary>
            
        </member>
        <member name="P:Cube.Collections.ArgumentCollection.Preprocessor">
            
             Preprocessor
            
             <summary>
             Gets a preprocessor that is invoked before parsing.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.ArgumentCollection.GetEnumerator">
            
             GetEnumerator
            
             <summary>
             Returns an enumerator that iterates through a collection.
             </summary>
            
             <returns>
             Enumerator that can be used to iterate through the collection.
             </returns>
            
        </member>
        <member name="M:Cube.Collections.ArgumentCollection.Dispose(System.Boolean)">
            
             Dispose
            
             <summary>
             Releases the unmanaged resources used by the object and
             optionally releases the managed resources.
             </summary>
            
             <param name="disposing">
             true to release both managed and unmanaged resources;
             false to release only unmanaged resources.
             </param>
            
        </member>
        <member name="M:Cube.Collections.ArgumentCollection.Invoke(System.Collections.Generic.IEnumerable{System.String})">
            
             Invoke
            
             <summary>
             Parses the specified arguments.
             </summary>
            
        </member>
        <member name="T:Cube.Collections.IArgumentPreprocessor">
            
             IArgumentPreprocessor
            
             <summary>
             Represents interface to process the provided arguments before
             parsing.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.IArgumentPreprocessor.Invoke(System.Collections.Generic.IEnumerable{System.String})">
            
             Invoke
            
             <summary>
             Invokes the processing.
             </summary>
            
             <param name="src">Source arguments.</param>
            
             <returns>Normalized arguments.</returns>
            
        </member>
        <member name="T:Cube.Collections.PosixArgumentPreprocessor">
            
             PosixArgumentPreprocessor
            
             <summary>
             Provides functionality to process the POSIX based arguments.
             </summary>
            
             <remarks>
             Treats a '-foption_argument' option as '-f', '-o', '-p', and more.
             </remarks>
            
             <seealso href="http://pubs.opengroup.org/onlinepubs/009696899/basedefs/xbd_chap12.html" />
            
        </member>
        <member name="M:Cube.Collections.PosixArgumentPreprocessor.Invoke(System.Collections.Generic.IEnumerable{System.String})">
            
             Invoke
            
             <summary>
             Invokes the processing.
             </summary>
            
             <param name="src">Source arguments.</param>
            
             <returns>Normalized arguments.</returns>
            
        </member>
        <member name="M:Cube.Collections.PosixArgumentPreprocessor.Convert(System.String)">
            
             Convert
            
             <summary>
             Converts the specified argument.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.PosixArgumentPreprocessor.AsEnumerable(Cube.Collections.ArgumentToken)">
            
             AsEnumerable
            
             <summary>
             Treats the specified value as enumerable.
             </summary>
            
        </member>
        <member name="T:Cube.Collections.GnuArgumentPreprocessor">
            
             GnuArgumentPreprocessor
            
             <summary>
             Provides functionality to process the GNU based arguments.
             </summary>
            
             <seealso href="https://www.gnu.org/prep/standards/html_node/Command_002dLine-Interfaces.html" />
            
        </member>
        <member name="M:Cube.Collections.GnuArgumentPreprocessor.Convert(System.String)">
            
             Convert
            
             <summary>
             Converts the specified argument.
             </summary>
            
        </member>
        <member name="T:Cube.Collections.DosArgumentPreprocessor">
            
             DosArgumentPreprocessor
            
             <summary>
             Provides functionality to process the DOS based arguments.
             </summary>
            
             <remarks>
             Allows only '/Foo' format.
             </remarks>
            
        </member>
        <member name="M:Cube.Collections.DosArgumentPreprocessor.Invoke(System.Collections.Generic.IEnumerable{System.String})">
            
             Invoke
            
             <summary>
             Invokes the normalization.
             </summary>
            
             <param name="src">Source arguments.</param>
            
             <returns>Normalized arguments.</returns>
            
        </member>
        <member name="M:Cube.Collections.DosArgumentPreprocessor.Convert(System.String)">
            
             Convert
            
             <summary>
             Converts the specified argument.
             </summary>
            
        </member>
        <member name="T:Cube.Collections.WindowsArgumentPreprocessor">
            
             WindowsArgumentPreprocessor
            
             <summary>
             Provides functionality to process the Windows based arguments.
             </summary>
            
             <remarks>
             Allows '/Foo', '-Foo', '--Foo' formats and all of them are treated
             as 'Foo' option, it means that the class does not allow the short
             named options like POSIX.
             </remarks>
            
        </member>
        <member name="M:Cube.Collections.WindowsArgumentPreprocessor.Convert(System.String)">
            
             Convert
            
             <summary>
             Converts the specified argument.
             </summary>
            
        </member>
        <member name="T:Cube.Collections.ArgumentToken">
            
             ArgumentToken
            
             <summary>
             Represents an item of arguments. The class is mainly used in the
             IArgumentPreprocessor implemented classes.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.ArgumentToken.#ctor(System.String)">
            
             ArgumentToken
            
             <summary>
             Initializes a new instance of the ArgumentToken class with the
             specified value.
             </summary>
            
             <param name="value">Value of the argument.</param>
            
        </member>
        <member name="M:Cube.Collections.ArgumentToken.#ctor(System.String,System.String)">
            
             ArgumentToken
            
             <summary>
             Initializes a new instance of the ArgumentToken class with the
             specified arguments.
             </summary>
            
             <param name="value">Value of the argument.</param>
             <param name="prefix">Prefix of the argument.</param>
            
        </member>
        <member name="P:Cube.Collections.ArgumentToken.Value">
            
             Value
            
             <summary>
             Gets the value of the token.
             </summary>
            
        </member>
        <member name="P:Cube.Collections.ArgumentToken.Prefix">
            
             Prefix
            
             <summary>
             Gets the prefix value of the token.
             </summary>
            
        </member>
        <member name="T:Cube.Collections.CacheCollection`2">
            
             CacheCollection(TKey, TValue)
            
             <summary>
             Provides a cache manager of TValue objects.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.CacheCollection`2.#ctor(System.Func{`0,`1})">
            
             CacheCollection
            
             <summary>
             Initializes a new instance of the CacheCollection class with
             the specified creating action.
             </summary>
            
             <param name="creator">Action that creates an item.</param>
            
             <remarks>
             The creator is executed as an asynchronous operation.
             </remarks>
            
        </member>
        <member name="M:Cube.Collections.CacheCollection`2.#ctor(System.Func{`0,`1},System.Action{`0,`1})">
            
             CacheCollection
            
             <summary>
             Initializes a new instance of the CacheCollection class with
             the specified parameters.
             </summary>
            
             <param name="creator">Action that creates an item.</param>
             <param name="disposer">
             Action that executes when either the Remove or Clear method
             is called.
             </param>
            
             <remarks>
             The creator is executed as an asynchronous operation.
             </remarks>
            
        </member>
        <member name="P:Cube.Collections.CacheCollection`2.Count">
            
             Count
            
             <summary>
             Gets the number of created items.
             </summary>
            
        </member>
        <member name="E:Cube.Collections.CacheCollection`2.Created">
            
             Created
            
             <summary>
             Occurs when the creating request is complete.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.CacheCollection`2.OnCreated(Cube.KeyValueEventArgs{`0,`1})">
            
             OnCreated
            
             <summary>
             Raises the Created event with the provided arguments.
             </summary>
            
             <param name="e">Arguments of the event being raised.</param>
            
        </member>
        <member name="E:Cube.Collections.CacheCollection`2.Failed">
            
             Failed
            
             <summary>
             Occurs when the creating request is failed.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.CacheCollection`2.OnFailed(Cube.KeyValueEventArgs{`0,System.Exception})">
            
             OnFailed
            
             <summary>
             Raises the Failed event with the provided arguments.
             </summary>
            
             <param name="e">Arguments of the event being raised.</param>
            
        </member>
        <member name="M:Cube.Collections.CacheCollection`2.GetOrCreate(`0)">
            
             GetOrCreate
            
             <summary>
             Gets the item associated with the specified TKey object, or
             creates it as an asynchronous operation.
             </summary>
            
             <param name="src">Key value.</param>
            
             <returns>
             default value of the type if the item is under creating.
             </returns>
            
        </member>
        <member name="M:Cube.Collections.CacheCollection`2.TryGetValue(`0,`1@)">
            
             TryGetValue
            
             <summary>
             Attempts to get the item associated with the specified key
             from the inner cache collection.
             </summary>
            
             <param name="src">Key value.</param>
             <param name="dest">
             When this method returns, contains the object from the
             inner collection that has the specified key, or the
             default value of the type if the operation failed.
             </param>
            
             <returns>
             true if the key was found in the inner collection;
             otherwise, false.
             </returns>
            
        </member>
        <member name="M:Cube.Collections.CacheCollection`2.Contains(`0)">
            
             Contains
            
             <summary>
             Gets a value that determines the item associated with the
             specified key exists in the inner cache collection.
             </summary>
            
             <param name="src">Key value.</param>
            
             <returns>
             default(TValue) if the item is under creating.
             </returns>
            
        </member>
        <member name="M:Cube.Collections.CacheCollection`2.Remove(`0)">
            
             Remove
            
             <summary>
             Removes the item associated with the specified key.
             </summary>
            
             <param name="src">Key value.</param>
            
             <returns>
             true if the item was removed successfully; otherwise, false.
             </returns>
            
        </member>
        <member name="M:Cube.Collections.CacheCollection`2.Clear">
            
             Clear
            
             <summary>
             Removes all of the created items.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.CacheCollection`2.GetEnumerator">
            
             GetEnumerator
            
             <summary>
             Returns an enumerator that iterates through this collection.
             </summary>
            
             <returns>
             An IEnumerator(KeyValuePair(TKey, TValue)) object for this
             collection.
             </returns>
            
        </member>
        <member name="M:Cube.Collections.CacheCollection`2.Dispose(System.Boolean)">
            
             Dispose
            
             <summary>
             Releases the unmanaged resources used by the object and
             optionally releases the managed resources.
             </summary>
            
             <param name="disposing">
             true to release both managed and unmanaged resources;
             false to release only unmanaged resources.
             </param>
            
        </member>
        <member name="M:Cube.Collections.CacheCollection`2.Create(`0)">
            
             Create
            
             <summary>
             Creates the item associated with the specified key.
             </summary>
            
        </member>
        <member name="T:Cube.Collections.Differences.CommonSequence`1">
            
             CommonSequence
            
             <summary>
             Represents the sequence of diff results.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.Differences.CommonSequence`1.#ctor(System.Int32,System.Int32,System.Int32,Cube.Collections.Differences.CommonSequence{`0})">
            
             CommonSequence
            
             <summary>
             Initializes a new instance of the CommonSequence class with
             the specified arguments.
             </summary>
            
             <param name="older">Start position of the older content.</param>
             <param name="newer">Start position of the newer content.</param>
             <param name="count">Number of elements.</param>
             <param name="next">Next sequence.</param>
            
        </member>
        <member name="P:Cube.Collections.Differences.CommonSequence`1.OlderStart">
            
             OlderStart
            
             <summary>
             Get the start position of the older content.
             </summary>
            
        </member>
        <member name="P:Cube.Collections.Differences.CommonSequence`1.NewerStart">
            
             NewerStart
            
             <summary>
             Get the start position of the newer content.
             </summary>
            
        </member>
        <member name="P:Cube.Collections.Differences.CommonSequence`1.Count">
            
             Count
            
             <summary>
             Gets the number of elements in the content.
             </summary>
            
        </member>
        <member name="P:Cube.Collections.Differences.CommonSequence`1.Next">
            
             Next
            
             <summary>
             Gets the next sequence.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.Differences.CommonSequence`1.Reverse">
            
             Reverse
            
             <summary>
             Reverses the provided linked list.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.Differences.CommonSequence`1.ToResult(`0[],`0[],Cube.Collections.Differences.Condition,System.Boolean)">
            
             ToResult
            
             <summary>
             Converts to the collection of Result(T) objects.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.Differences.CommonSequence`1.Create(Cube.Collections.Differences.Condition,`0[],System.Int32,System.Int32,`0[],System.Int32,System.Int32)">
            
             Create
            
             <summary>
             Creates a new instance of the Result(T) class.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.Differences.CommonSequence`1.Slice(`0[],System.Int32,System.Int32)">
            
             Slice
            
             <summary>
             Gets the part of the specified collection.
             </summary>
            
        </member>
        <member name="T:Cube.Collections.Differences.OnpAlgorithm`1">
            
             OnpAlgorithm
            
             <summary>
             Provides functionality to detect the diff.
             </summary>
            
             <remarks>
             Sun Wu, Udi Manber, and Gene Myers, "An O(NP) Sequence Comparison
             Algorithm", Information Processing Letters Volume 35, Issue 6,
             pp. 317-323, September 1990.
             </remarks>
            
        </member>
        <member name="M:Cube.Collections.Differences.OnpAlgorithm`1.#ctor">
            
             OnpAlgorithm
            
             <summary>
             Initializes a new instance of the OnpAlgorithm class.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.Differences.OnpAlgorithm`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            
             OnpAlgorithm
            
             <summary>
             Initializes a new instance of the OnpAlgorithm class with the
             specified comparer.
             </summary>
            
             <param name="comparer">Object to compare.</param>
            
        </member>
        <member name="M:Cube.Collections.Differences.OnpAlgorithm`1.Compare(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0},Cube.Collections.Differences.Condition)">
            
             Compare
            
             <summary>
             Compares the specified sequence and detects the diff of them.
             </summary>
            
             <param name="older">Older sequence.</param>
             <param name="newer">Newer sequence.</param>
             <param name="mask">Mask of the results.</param>
            
             <returns>Diff results.</returns>
            
        </member>
        <member name="M:Cube.Collections.Differences.OnpAlgorithm`1.Compare(`0[],`0[],Cube.Collections.Differences.Condition)">
            
             Compare
            
             <summary>
             Compares the specified sequence and detects the diff of them.
             </summary>
            
             <param name="older">Older sequence.</param>
             <param name="newer">Newer sequence.</param>
             <param name="mask">Mask of the results.</param>
            
             <returns>Diff results.</returns>
            
        </member>
        <member name="M:Cube.Collections.Differences.OnpAlgorithm`1.CompareEmpty(`0[],`0[],Cube.Collections.Differences.Condition)">
            
             CompareEmpty
            
             <summary>
             Compares the sequence.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.Differences.OnpAlgorithm`1.Compare(Cube.Collections.Differences.Condition)">
            
             Compare
            
             <summary>
             Compares the sequence.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.Differences.OnpAlgorithm`1.SearchSnake(System.Int32)">
            
             SearchSnake
            
             <summary>
             Detects the snake.
             </summary>
            
        </member>
        <member name="T:Cube.Collections.Differences.Condition">
            
             Condition
            
             <summary>
             Specifies the diff condition.
             </summary>
            
             <remarks>
             DiffOnly および Any は、主に処理実行時に指定する Mask として
             使用されます。
             </remarks>
            
        </member>
        <member name="F:Cube.Collections.Differences.Condition.None">
            <summary>No diff.</summary>
        </member>
        <member name="F:Cube.Collections.Differences.Condition.Inserted">
            <summary>Older results are empty.</summary>
        </member>
        <member name="F:Cube.Collections.Differences.Condition.Deleted">
            <summary>Newer results are empty.</summary>
        </member>
        <member name="F:Cube.Collections.Differences.Condition.Changed">
            <summary>Changed content.</summary>
        </member>
        <member name="F:Cube.Collections.Differences.Condition.DiffOnly">
            <summary>Mask that indicates that there has been some change.</summary>
        </member>
        <member name="F:Cube.Collections.Differences.Condition.Any">
            <summary>Mask of all defined elements.</summary>
        </member>
        <member name="T:Cube.Collections.Differences.Result`1">
            
             Result
            
             <summary>
             Represents a part of the diff results.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.Differences.Result`1.#ctor(Cube.Collections.Differences.Condition,System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            
             Result
            
             <summary>
             Initializes a new instance of the Result class with the
             specified arguments.
             </summary>
            
             <param name="condition">Diff condition.</param>
             <param name="older">Target part of the older sequence.</param>
             <param name="newer">Target part of the newer sequence.</param>
            
        </member>
        <member name="P:Cube.Collections.Differences.Result`1.Condition">
            
             Condition
            
             <summary>
             Gets the diff condition.
             </summary>
            
        </member>
        <member name="P:Cube.Collections.Differences.Result`1.Older">
            
             Older
            
             <summary>
             Gets the target part of the older sequence.
             </summary>
            
        </member>
        <member name="P:Cube.Collections.Differences.Result`1.Newer">
            
             Newer
            
             <summary>
             Gets the target part of the newer sequence.
             </summary>
            
        </member>
        <member name="T:Cube.Collections.EnumerableBase`1">
            
             EnumerableBase
            
             <summary>
             Represents the simplest implementation of the IEnumerable(T)
             interface.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.EnumerableBase`1.#ctor">
            
             EnumerableBase
            
             <summary>
             Initializes a new instance of the EnumerableBase class.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.EnumerableBase`1.GetEnumerator">
            
             GetEnumerator
            
             <summary>
             Returns an enumerator that iterates through a collection.
             </summary>
            
             <returns>
             Enumerator that can be used to iterate through the collection.
             </returns>
            
        </member>
        <member name="M:Cube.Collections.EnumerableBase`1.System#Collections#IEnumerable#GetEnumerator">
            
             GetEnumerator
            
             <summary>
             Returns an enumerator that iterates through a collection.
             </summary>
            
             <returns>
             IEnumerator object that can be used to iterate through the
             collection.
             </returns>
            
        </member>
        <member name="T:Cube.Collections.KeyValuePair">
            
             KeyValuePair
            
             <summary>
             Provides factory methods of the KeyValuePair(T, U) class.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.KeyValuePair.Create``2(``0,``1)">
            
             Create
            
             <summary>
             Creates a new instance of the KeyValuePair(T, U) class with the
             specified key and value.
             </summary>
            
             <param name="key">Key.</param>
             <param name="value">Value.</param>
            
             <returns>KeyValuePair(T, U) object.</returns>
            
        </member>
        <member name="T:Cube.Collections.LambdaComparer`1">
            
             LambdaComparer(T)
            
             <summary>
             Provides functionality to convert from the Func(T, T, bool) to
             the instance of Comparer(T) inherited class.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.LambdaComparer`1.#ctor(System.Func{`0,`0,System.Int32})">
            
             LambdaComparer(T)
            
             <summary>
             Initializes a new instance of the LambdaComparer(T) with the
             specified function.
             </summary>
            
             <param name="src">Function to compare.</param>
            
        </member>
        <member name="M:Cube.Collections.LambdaComparer`1.Compare(`0,`0)">
            
             Equals
            
             <summary>
             Determines whether two objects of type T are equal.
             </summary>
            
             <param name="x">The first object to compare.</param>
             <param name="y">The second object to compare.</param>
            
             <returns>
             Zero if the specified objects are equal;
             Less than zero if x is less than y;
             otherwise, Greater than zero.
             </returns>
            
        </member>
        <member name="T:Cube.Collections.LambdaEqualityComparer`1">
            
             LambdaEqualityComparer(T)
            
             <summary>
             Provides functionality to convert from the Func(T, T, bool) to
             the instance of EqualityComparer(T) inherited class.
             </summary>
            
             <typeparam name="T">The type of objects to compare.</typeparam>
            
        </member>
        <member name="M:Cube.Collections.LambdaEqualityComparer`1.#ctor(System.Func{`0,`0,System.Boolean})">
            
             LambdaEqualityComparer(T)
            
             <summary>
             Initializes a new instance of the LambdaEqualityComparer(T)
             class with the specified comparer.
             </summary>
            
             <param name="src">Function to compare.</param>
            
        </member>
        <member name="M:Cube.Collections.LambdaEqualityComparer`1.#ctor(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})">
            
             LambdaEqualityComparer(T)
            
             <summary>
             Initializes a new instance of the LambdaEqualityComparer(T)
             class with the specified arguments.
             </summary>
            
             <param name="src">Function to compare.</param>
             <param name="hash">Function to convert to the hash code.</param>
            
        </member>
        <member name="M:Cube.Collections.LambdaEqualityComparer`1.Equals(`0,`0)">
            
             Equals
            
             <summary>
             Determines whether two objects of type T are equal.
             </summary>
            
             <param name="x">The first object to compare.</param>
             <param name="y">The second object to compare.</param>
            
             <returns>
             true if the specified objects are equal; otherwise, false.
             </returns>
            
        </member>
        <member name="M:Cube.Collections.LambdaEqualityComparer`1.GetHashCode(`0)">
            
             GetHashCode
            
             <summary>
             Serves as a hash function for the specified object for hashing
             algorithms and data structures, such as a hash table.
             </summary>
            
             <param name="obj">
             The object for which to get a hash code.
             </param>
            
             <returns>Hash code for the specified object.</returns>
            
        </member>
        <member name="T:Cube.Collections.ObservableBase`1">
            
             ObservableBase
            
             <summary>
             Represents the base class of a dynamic data collection that
             provides notifications when items get added, removed, or when the
             whole list is refreshed.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.ObservableBase`1.#ctor">
            
             ObservableBase
            
             <summary>
             Initializes a new instance of the ObservableBase class.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.ObservableBase`1.#ctor(Cube.Invoker)">
            
             ObservableBase
            
             <summary>
             Initializes a new instance of the ObservableBase class with
             the specified invoker.
             </summary>
            
             <param name="invoker">Invoker object.</param>
            
        </member>
        <member name="P:Cube.Collections.ObservableBase`1.Invoker">
            
             Invoker
            
             <summary>
             Gets or sets the invoker object.
             </summary>
            
        </member>
        <member name="E:Cube.Collections.ObservableBase`1.CollectionChanged">
            
             CollectionChanged
            
             <summary>
             Occurs when an item is added, removed, changed, moved,
             or the entire list is refreshed.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.ObservableBase`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            
             OnCollectionChanged
            
             <summary>
             Raises the CollectionChanged event with the provided arguments.
             </summary>
            
             <param name="e">Arguments of the event being raised.</param>
            
        </member>
        <member name="T:Cube.Collections.OrderedDictionary`2">
            
             OrderedDictionary(TKey, TValue)
            
             <summary>
             Represents a dictionary that preserves the insertion order.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.OrderedDictionary`2.#ctor">
            
             OrderedDictionary(TKey, TValue)
            
             <summary>
             Initializes a new instance of the OrderedDictionary(TKey, TValue)
             class.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.OrderedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            
             OrderedDictionary
            
             <summary>
             Initializes a new instance of the OrderedDictionary(TKey, TValue)
             class with the specified collection.
             </summary>
            
             <param name="cp">Collection to be copied.</param>
            
        </member>
        <member name="P:Cube.Collections.OrderedDictionary`2.Count">
            
             Count
            
             <summary>
             Gets the number of key/values pairs.
             </summary>
            
        </member>
        <member name="P:Cube.Collections.OrderedDictionary`2.IsReadOnly">
            
             IsReadOnly
            
             <summary>
             Gets a value indicating whether the OrderedDictionary(TKey, TValue)
             collection is read-only.
             </summary>
            
        </member>
        <member name="P:Cube.Collections.OrderedDictionary`2.Item(`0)">
            
             Item(TKey)
            
             <summary>
             Gets or sets the value with the specified key.
             </summary>
            
        </member>
        <member name="P:Cube.Collections.OrderedDictionary`2.Item(System.Int32)">
            
             Item(int)
            
             <summary>
             Gets or sets the value at the specified index.
             </summary>
            
        </member>
        <member name="P:Cube.Collections.OrderedDictionary`2.Keys">
            
             Keys
            
             <summary>
             Gets an ICollection(TKey) object containing the keys in the
             OrderedDictionary(TKey, TValue) collection.
             </summary>
            
        </member>
        <member name="P:Cube.Collections.OrderedDictionary`2.Values">
            
             Values
            
             <summary>
             Gets an ICollection(TValue) object containing the values in the
             OrderedDictionary(TKey, TValue) collection.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.OrderedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            
             Contains
            
             <summary>
             Determines whether the OrderedDictionary(TKey, TValue) collection
             contains a specific item.
             </summary>
            
             <param name="item">
             Item to locate in the OrderedDictionary(TKey, TValue) collection.
             </param>
            
             <returns>
             true if the OrderedDictionary(TKey, TValue) collection contains an
             item; otherwise, false.
             </returns>
            
        </member>
        <member name="M:Cube.Collections.OrderedDictionary`2.ContainsKey(`0)">
            
             ContainsKey
            
             <summary>
             Determines whether the OrderedDictionary(TKey, TValue) collection
             contains a specific key.
             </summary>
            
             <param name="key">
             Key to locate in the OrderedDictionary(TKey, TValue) collection.
             </param>
            
             <returns>
             true if the OrderedDictionary(TKey, TValue) collection contains an
             element with the specified key; otherwise, false.
             </returns>
            
        </member>
        <member name="M:Cube.Collections.OrderedDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            
             Add
            
             <summary>
             Adds an entry with the specified KeyValuePair(TKey, TValue) object
             into the OrderedDictionary(TKey, TValue) collection with the lowest
             available index.
             </summary>
            
             <param name="item">Key/value pair of the entry to add.</param>
            
        </member>
        <member name="M:Cube.Collections.OrderedDictionary`2.Add(`0,`1)">
            
             Add
            
             <summary>
             Adds an entry with the specified key and value into the
             OrderedDictionary(TKey, TValue) collection with the lowest available
             index.
             </summary>
            
             <param name="key">Key of the entry to add.</param>
             <param name="value">Value of the entry to add. </param>
            
        </member>
        <member name="M:Cube.Collections.OrderedDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            
             Remove
            
             <summary>
             Removes the entry with the specified key/value pair from the
             OrderedDictionary(TKey, TValue) collection.
             </summary>
            
             <param name="item">Key/value pair of the entry to remove.</param>
            
             <returns>
             true for success; otherwise, false.
             </returns>
            
        </member>
        <member name="M:Cube.Collections.OrderedDictionary`2.Remove(`0)">
            
             Remove
            
             <summary>
             Removes the entry with the specified key from the
             OrderedDictionary(TKey, TValue) collection.
             </summary>
            
             <param name="key">The key of the entry to remove.</param>
            
             <returns>
             true for success; otherwise, false.
             </returns>
            
        </member>
        <member name="M:Cube.Collections.OrderedDictionary`2.Clear">
            
             Clear
            
             <summary>
             Removes all elements from the OrderedDictionary(TKey, TValue)
             collection.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.OrderedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            
             CopyTo
            
             <summary>
             Copies the OrderedDictionary(TKey, TValue) elements to a
             one-dimensional array object at the specified index.
             </summary>
            
             <param name="dest">One-dimensional array object to copy to.</param>
             <param name="offset">Index in array at which copying begins.</param>
            
        </member>
        <member name="M:Cube.Collections.OrderedDictionary`2.TryGetValue(`0,`1@)">
            
             TryGetValue
            
             <summary>
             Gets the value associated with the specified key.
             </summary>
            
             <param name="key">Key of the value to get.</param>
             <param name="dest">
             When this method returns, contains the value associated with the
             specified key, if the key is found; otherwise, the default value
             for the type of the value parameter.
             </param>
            
             <returns>
             true if the OrderedDictionary(TKey, TValue) contains an element
             with the specified key; otherwise, false.
             </returns>
            
        </member>
        <member name="M:Cube.Collections.OrderedDictionary`2.GetEnumerator">
            
             GetEnumerator
            
             <summary>
             Returns an enumerator that iterates through a collection.
             </summary>
            
             <returns>
             Enumerator that can be used to iterate through the collection.
             </returns>
            
        </member>
        <member name="M:Cube.Collections.OrderedDictionary`2.Dispose(System.Boolean)">
            
             Dispose
            
             <summary>
             Releases the unmanaged resources used by the object and
             optionally releases the managed resources.
             </summary>
            
             <param name="disposing">
             true to release both managed and unmanaged resources;
             false to release only unmanaged resources.
             </param>
            
        </member>
        <member name="T:Cube.Collections.Subscription`1">
            
             Subscription
            
             <summary>
             Provides functionality to add or remove subscribers.
             </summary>
            
        </member>
        <member name="P:Cube.Collections.Subscription`1.Count">
            
             Count
            
             <summary>
             Gets the number of registered callbacks.
             </summary>
            
        </member>
        <member name="P:Cube.Collections.Subscription`1.Subscribers">
            
             Subscribers
            
             <summary>
             Gets the collection of subscribers.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.Subscription`1.Subscribe(`0)">
            
             Subscribe
            
             <summary>
             Add the specified subscriber to the subscription.
             </summary>
            
             <param name="subscriber">Subscriber object.</param>
            
             <returns>
             Object to remove the specified subscriber.
             </returns>
            
        </member>
        <member name="M:Cube.Collections.Subscription`1.GetEnumerator">
            
             GetEnumerator
            
             <summary>
             Returns an enumerator that iterates through a collection.
             </summary>
            
             <returns>
             Enumerator that can be used to iterate through the collection.
             </returns>
            
        </member>
        <member name="M:Cube.Collections.Subscription`1.Dispose(System.Boolean)">
            
             Dispose
            
             <summary>
             Releases the unmanaged resources used by the SubscriptionReader
             and optionally releases the managed resources.
             </summary>
            
             <param name="disposing">
             true to release both managed and unmanaged resources;
             false to release only unmanaged resources.
             </param>
            
        </member>
        <member name="T:Cube.DataContract.Format">
            
             Format
            
             <summary>
             Specifies formats that can be serialized and deserialized by the
             DataContract module.
             </summary>
            
        </member>
        <member name="F:Cube.DataContract.Format.Registry">
            <summary>Registry</summary>
        </member>
        <member name="F:Cube.DataContract.Format.Xml">
            <summary>XML</summary>
        </member>
        <member name="F:Cube.DataContract.Format.Json">
            <summary>JSON</summary>
        </member>
        <member name="T:Cube.DataContract.Formatter">
            
             Formatter
            
             <summary>
             Provides functionality to serialize and deserialize the DataContract
             objects.
             </summary>
            
        </member>
        <member name="P:Cube.DataContract.Formatter.DefaultKey">
            
             DefaultKey
            
             <summary>
             Gets or sets the default registry subkey when serializing or
             deserializing the registry.
             </summary>
            
             <remarks>
             シリアライズまたはデシリアライズ時に明示的にサブキーを指定しな
             かった場合、このサブキーが利用されます。
             </remarks>
            
        </member>
        <member name="M:Cube.DataContract.Formatter.Serialize``1(Cube.DataContract.Format,System.String,``0)">
            
             Serialize
            
             <summary>
             Serializes objects to the specified location.
             </summary>
            
             <param name="format">Serialization format.</param>
             <param name="dest">Saving location.</param>
             <param name="src">Object to be serialized.</param>
            
        </member>
        <member name="M:Cube.DataContract.Formatter.Serialize``1(Cube.DataContract.Format,System.IO.Stream,``0)">
            
             Serialize
            
             <summary>
             Serializes objects to the specified stream.
             </summary>
            
             <param name="format">Serialization format.</param>
             <param name="dest">Saving stream.</param>
             <param name="src">Object to be serialized.</param>
            
        </member>
        <member name="M:Cube.DataContract.Formatter.Serialize``1(Microsoft.Win32.RegistryKey,``0)">
            
             Serialize
            
             <summary>
             Serializes objects to the specified registry subkey.
             </summary>
            
             <param name="dest">Registry subkey</param>
             <param name="src">Object to be serialized.</param>
            
        </member>
        <member name="M:Cube.DataContract.Formatter.Serialize(System.String,System.Action{System.IO.Stream})">
            
             Serialize
            
             <summary>
             Serializes objects to the specified file.
             </summary>
            
        </member>
        <member name="M:Cube.DataContract.Formatter.SerializeXml``1(System.IO.Stream,``0)">
            
             SerializeXml
            
             <summary>
             Serializes objects to the specified stream as XML format.
             </summary>
            
        </member>
        <member name="M:Cube.DataContract.Formatter.SerializeJson``1(System.IO.Stream,``0)">
            
             SerializeJson
            
             <summary>
             Serializes objects to the specified stream as JSON format.
             </summary>
            
        </member>
        <member name="M:Cube.DataContract.Formatter.Deserialize``1(Cube.DataContract.Format,System.String)">
            
             Deserialize
            
             <summary>
             Deserializes contents of the specified location.
             </summary>
            
             <param name="format">Serialization format.</param>
             <param name="src">Location to be loaded.</param>
            
             <returns>Deserialized object.</returns>
            
        </member>
        <member name="M:Cube.DataContract.Formatter.Deserialize``1(Cube.DataContract.Format,System.IO.Stream)">
            
             Deserialize
            
             <summary>
             Deserializes contents of the specified stream.
             </summary>
            
             <param name="format">Serialization format.</param>
             <param name="src">Stream to be loaded.</param>
            
             <returns>Deserialized object.</returns>
            
        </member>
        <member name="M:Cube.DataContract.Formatter.Deserialize``1(Microsoft.Win32.RegistryKey)">
            
             Deserialize
            
             <summary>
             Deserializes contents of the specified subkey.
             </summary>
            
             <param name="src">Registry subkey to be loaded.</param>
            
             <returns>Deserialized object.</returns>
            
        </member>
        <member name="M:Cube.DataContract.Formatter.Deserialize``1(System.String,System.Func{System.IO.Stream,``0})">
            
             Deserialize
            
             <summary>
             Deserializes contents of the specified file.
             </summary>
            
        </member>
        <member name="M:Cube.DataContract.Formatter.DeserializeXml``1(System.IO.Stream)">
            
             DeserializeXml
            
             <summary>
             Deserializes contents of the specified stream as XML format.
             </summary>
            
        </member>
        <member name="M:Cube.DataContract.Formatter.DeserializeJson``1(System.IO.Stream)">
            
             DeserializeJson
            
             <summary>
             Deserializes contents of the specified stream as JSON format.
             </summary>
            
        </member>
        <member name="T:Cube.DataContract.Mixin.PropertyExtension">
            
             PropertyExtension
            
             <summary>
             Provides extended methods of the Type and PropertyInfo classes.
             </summary>
            
        </member>
        <member name="M:Cube.DataContract.Mixin.PropertyExtension.Parse(System.Type,System.Object)">
            
             Parse
            
             <summary>
             Converts the specified value according to the specified type.
             </summary>
            
             <param name="src">Type of the converted object.</param>
             <param name="value">Object to be converted.</param>
            
             <returns>Converted object.</returns>
            
        </member>
        <member name="M:Cube.DataContract.Mixin.PropertyExtension.IsObject(System.Type)">
            
             IsObject
            
             <summary>
             Determines whether the specified type is generic object type.
             </summary>
            
             <param name="src">Target type.</param>
            
             <returns>true for generic object type.</returns>
            
        </member>
        <member name="M:Cube.DataContract.Mixin.PropertyExtension.IsGenericList(System.Type)">
            
             IsGenericList
            
             <summary>
             Determines whether the specified type is List(T) or IList(T).
             </summary>
            
             <param name="src">Target type.</param>
            
             <returns>true for generic list.</returns>
            
        </member>
        <member name="M:Cube.DataContract.Mixin.PropertyExtension.GetPropertyType(System.Reflection.PropertyInfo)">
            
             GetPropertyType
            
             <summary>
             Gets the type of specified object.
             </summary>
            
             <param name="src">Property information.</param>
            
             <returns>Type object.</returns>
            
             <remarks>
             Returns the type of T if the specified object represents the
             Nullable(T) type.
             </remarks>
            
        </member>
        <member name="M:Cube.DataContract.Mixin.PropertyExtension.GetDataMemberName(System.Reflection.PropertyInfo)">
            
             GetDataMemberName
            
             <summary>
             Gets the name of property that has the DataMember attribute.
             </summary>
            
             <param name="info">Property information.</param>
            
             <returns>Name of property.</returns>
            
        </member>
        <member name="T:Cube.DataContract.RegistryDeserializer">
            
             RegistryDeserializer
            
             <summary>
             Provides functionality to deserialize from the registry.
             </summary>
            
        </member>
        <member name="M:Cube.DataContract.RegistryDeserializer.Invoke``1(Microsoft.Win32.RegistryKey)">
            
             Invoke
            
             <summary>
             Invokes the deserialization from the specified registry key.
             </summary>
            
             <param name="src">Root registry key.</param>
            
             <returns>Deserialized object.</returns>
            
        </member>
        <member name="M:Cube.DataContract.RegistryDeserializer.Get(System.Type,Microsoft.Win32.RegistryKey)">
            
             Get
            
             <summary>
             Gets the object corresponding to the specified type and
             registry key.
             </summary>
            
        </member>
        <member name="M:Cube.DataContract.RegistryDeserializer.Get(System.Type,Microsoft.Win32.RegistryKey,System.String)">
            
             Get
            
             <summary>
             Gets the object corresponding to the specified type, registry
             key, and name.
             </summary>
            
        </member>
        <member name="M:Cube.DataContract.RegistryDeserializer.GetArray(System.Type,Microsoft.Win32.RegistryKey)">
            
             GetArray
            
             <summary>
             Gets the array object corresponding to the specified type and
             registry key.
             </summary>
            
        </member>
        <member name="M:Cube.DataContract.RegistryDeserializer.GetList(System.Type,Microsoft.Win32.RegistryKey)">
            
             GetList
            
             <summary>
             Gets the list object corresponding to the specified type and
             registry key.
             </summary>
            
        </member>
        <member name="M:Cube.DataContract.RegistryDeserializer.GetListCore(System.Type,Microsoft.Win32.RegistryKey)">
            
             GetListCore
            
             <summary>
             Gets the list object corresponding to the specified type and
             registry key.
             </summary>
            
        </member>
        <member name="M:Cube.DataContract.RegistryDeserializer.GetListElement(System.Type,Microsoft.Win32.RegistryKey)">
            
             GetListElement
            
             <summary>
             Gets the list object corresponding to the specified type and
             registry key.
             </summary>
            
        </member>
        <member name="M:Cube.DataContract.RegistryDeserializer.OpenGet(Microsoft.Win32.RegistryKey,System.String,System.Func{Microsoft.Win32.RegistryKey,System.Object})">
            
             OpenGet
            
             <summary>
             Opens the registry from the specified registry key and name,
             and invokes the specified action.
             </summary>
            
        </member>
        <member name="T:Cube.DataContract.RegistrySerializer">
            
             RegistrySserializer
            
             <summary>
             Provides functionality to serialize to the registry.
             </summary>
            
        </member>
        <member name="M:Cube.DataContract.RegistrySerializer.Invoke``1(Microsoft.Win32.RegistryKey,``0)">
            
             Invoke
            
             <summary>
             Invokes the serialization to the specified registry key.
             </summary>
            
             <param name="dest">Root registry key.</param>
             <param name="src">Object to be serialized.</param>
            
        </member>
        <member name="M:Cube.DataContract.RegistrySerializer.Set(System.Type,Microsoft.Win32.RegistryKey,System.Object)">
            
             Set
            
             <summary>
             Sets the specified object to the specified registry key.
             </summary>
            
        </member>
        <member name="M:Cube.DataContract.RegistrySerializer.Set(System.Type,Microsoft.Win32.RegistryKey,System.String,System.Object)">
            
             Set
            
             <summary>
             Sets the specified object to the specified registry key.
             </summary>
            
        </member>
        <member name="M:Cube.DataContract.RegistrySerializer.SetArray(System.Type,Microsoft.Win32.RegistryKey,System.Array)">
            
             SetArray
            
             <summary>
             Sets the specified array object to the specified registry key.
             </summary>
            
        </member>
        <member name="M:Cube.DataContract.RegistrySerializer.SetList(System.Type,Microsoft.Win32.RegistryKey,System.Collections.IList)">
            
             SetList
            
             <summary>
             Sets the specified list object to the specified registry key.
             </summary>
            
        </member>
        <member name="M:Cube.DataContract.RegistrySerializer.SetListElement(System.Type,Microsoft.Win32.RegistryKey,System.Object)">
            
             SetListElement
            
             <summary>
             Sets the specified list object to the specified registry key.
             </summary>
            
        </member>
        <member name="M:Cube.DataContract.RegistrySerializer.Create(Microsoft.Win32.RegistryKey,System.String,System.Action{Microsoft.Win32.RegistryKey})">
            
             Create
            
             <summary>
             Creates a new registry key with the specified registry key
             and name, and invokes the specified action.
             </summary>
            
        </member>
        <member name="M:Cube.DataContract.RegistrySerializer.Digit(System.Int32)">
            
             Digit
            
             <summary>
             Gets the digit number of the specified value.
             </summary>
            
        </member>
        <member name="T:Cube.Disposable">
            
             Disposable
            
             <summary>
             Provides functionality to create a IDisposable object.
             </summary>
            
        </member>
        <member name="M:Cube.Disposable.Create(System.Action)">
            
             Create
            
             <summary>
             Creates a IDisposable object from the specified action.
             </summary>
            
             <param name="dispose">Invoke when disposed.</param>
            
             <returns>IDisposable object.</returns>
            
        </member>
        <member name="T:Cube.Disposable.DisposableCore">
            
             DisposableCore
            
             <summary>
             Represents an implementation to execute the provided action
             as an IDisposable manner.
             </summary>
            
        </member>
        <member name="T:Cube.DisposableBase">
            
             DisposableBase
            
             <summary>
             Represents an implementation of the IDisposable interface.
             </summary>
            
        </member>
        <member name="M:Cube.DisposableBase.#ctor">
            
             DisposableBase
            
             <summary>
             Creates a new instance of the DisposableBase class.
             </summary>
            
        </member>
        <member name="P:Cube.DisposableBase.Disposed">
            
             Disposed
            
             <summary>
             Gets the value indicating whether the object is disposed.
             </summary>
            
        </member>
        <member name="M:Cube.DisposableBase.Finalize">
            
             ~DisposableBase
            
             <summary>
             Finalizes the DisposableBase.
             </summary>
            
        </member>
        <member name="M:Cube.DisposableBase.Dispose">
            
             Dispose
            
             <summary>
             Releases all resources used by the object.
             </summary>
            
        </member>
        <member name="M:Cube.DisposableBase.Dispose(System.Boolean)">
            
             Dispose
            
             <summary>
             Releases the unmanaged resources used by the object and
             optionally releases the managed resources.
             </summary>
            
             <param name="disposing">
             true to release both managed and unmanaged resources;
             false to release only unmanaged resources.
             </param>
            
        </member>
        <member name="T:Cube.DisposableOnceAction">
            
             DisposableOnceAction
            
             <summary>
             Provides functionality to invoke the provided action only once.
             </summary>
            
        </member>
        <member name="M:Cube.DisposableOnceAction.#ctor(System.Action,System.Action{System.Boolean})">
            
             DisposableOnceAction
            
             <summary>
             Initializes a new instance of the DisposableOnceAction
             with the specified actions.
             </summary>
            
             <param name="action">Action to be invoked.</param>
             <param name="dispose">Action to be invoked when disposing.</param>
            
        </member>
        <member name="P:Cube.DisposableOnceAction.Invoked">
            
             Invoked
            
             <summary>
             Gets a value indicating whether the provided action has been
             already invoked.
             </summary>
            
        </member>
        <member name="P:Cube.DisposableOnceAction.IgnoreTwice">
            
             IgnoreTwice
            
             <summary>
             Gets or sets a value indicating whether to ignore the second
             or later call. If set to false, TwiceException will be thrown
             on the second or later.
             </summary>
            
        </member>
        <member name="M:Cube.DisposableOnceAction.Invoke">
            
             Invoke
            
             <summary>
             Invokes the provided action.
             </summary>
            
        </member>
        <member name="M:Cube.DisposableOnceAction.Dispose(System.Boolean)">
            
             Dispose
            
             <summary>
             Releases the unmanaged resources used by the class
             and optionally releases the managed resources.
             </summary>
            
             <param name="disposing">
             true to release both managed and unmanaged resources;
             false to release only unmanaged resources.
             </param>
            
        </member>
        <member name="T:Cube.CollectionEventArgs">
            
             CollectionEventArgs
            
             <summary>
             Provides methods to create an instance of the CollectionEventArgs(T)
             or CollectionEventArgs(T) classes.
             </summary>
            
        </member>
        <member name="M:Cube.CollectionEventArgs.Create``1(System.Collections.Generic.IEnumerable{``0})">
            
             Create
            
             <summary>
             Creates a new instance of the CollectionEventArgs(T) class
             with the specified value.
             </summary>
            
             <param name="value">Value to use for the event.</param>
            
        </member>
        <member name="M:Cube.CollectionEventArgs.Create``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            
             Create
            
             <summary>
             Creates a new instance of the CollectionEventArgs(T) class
             with the specified arguments.
             </summary>
            
             <param name="value">Value to use for the event.</param>
             <param name="cancel">
             true to cancel the event; otherwise, false.
             </param>
            
        </member>
        <member name="T:Cube.CollectionEventArgs`1">
            
             CollectionEventArgs(T)
            
             <summary>
             Provides a value of type IEnumerable(T) to use for events.
             </summary>
            
        </member>
        <member name="M:Cube.CollectionEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            
             CollectionEventArgs(T)
            
             <summary>
             Creates a new instance of the CollectionEventArgs class with
             the specified value.
             </summary>
            
             <param name="value">Value to use for the event.</param>
            
        </member>
        <member name="T:Cube.CollectionCancelEventArgs`1">
            
             CollectionCancelEventArgs(T)
            
             <summary>
             Provides data for a cancelable event with a value of type
             IEnumerable(T).
             </summary>
            
        </member>
        <member name="M:Cube.CollectionCancelEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            
             CollectionCancelEventArgs
            
             <summary>
             Initializes a new instance of the CollectionCancelEventArgs
             class with the specified value. The Cancel property is set
             to false.
             </summary>
            
             <param name="value">Value to use for the event.</param>
            
        </member>
        <member name="M:Cube.CollectionCancelEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            
             CollectionCancelEventArgs
            
             <summary>
             Initializes a new instance of the CollectionCancelEventArgs
             class with the specified arguments.
             </summary>
            
             <param name="value">Value to use for the event.</param>
             <param name="cancel">
             true to cancel the event; otherwise, false.
             </param>
            
        </member>
        <member name="T:Cube.CollectionEventHandler`1">
            
             CollectionEventHandler(T)
            
             <summary>
             Represents the method to invoke an event.
             </summary>
            
        </member>
        <member name="T:Cube.CollectionCancelEventHandler`1">
            
             CollectionCancelEventHandler(T)
            
             <summary>
             Represents the method to invoke an event.
             </summary>
            
        </member>
        <member name="T:Cube.KeyValueEventArgs">
            
             KeyValueEventArgs
            
             <summary>
             Provides methods to create a new instance of the
             KeyValueEventArgs(T, U) or KeyValueCancelEventArgs(T, U) classes.
             </summary>
            
        </member>
        <member name="M:Cube.KeyValueEventArgs.Create``2(``0,``1)">
            
             Create
            
             <summary>
             Creates a new instance of the KeyValueEventArgs(T, U) class
             with the specified key and value.
             </summary>
            
             <param name="key">Key to use for the event.</param>
             <param name="value">Value to use for the event.</param>
            
        </member>
        <member name="M:Cube.KeyValueEventArgs.Create``2(``0,``1,System.Boolean)">
            
             Create
            
             <summary>
             Creates a new instance of the KeyValueCancelEventArgs(T, U)
             class with the specified arguments.
             </summary>
            
             <param name="key">Key to use for the event.</param>
             <param name="value">Value to use for the event.</param>
             <param name="cancel">
             true to cancel the event; otherwise, false.
             </param>
            
        </member>
        <member name="T:Cube.KeyValueEventArgs`2">
            
             KeyValueEventArgs(T, U)
            
             <summary>
             Provides Key-Value data to use for events.
             </summary>
            
        </member>
        <member name="M:Cube.KeyValueEventArgs`2.#ctor(`0,`1)">
            
             KeyValueEventArgs
            
             <summary>
             Creates a new instance of the KeyValueEventArgs class with the
             specified key and value.
             </summary>
            
             <param name="key">Key to use for the event.</param>
             <param name="value">Value to use for the event.</param>
            
        </member>
        <member name="P:Cube.KeyValueEventArgs`2.Key">
            
             Key
            
             <summary>
             Gets a key to use for the event.
             </summary>
            
        </member>
        <member name="T:Cube.KeyValueCancelEventArgs`2">
            
             KeyValueCancelEventArgs(T, U)
            
             <summary>
             Provides data for a cancelable event with Key-Value data.
             </summary>
            
        </member>
        <member name="M:Cube.KeyValueCancelEventArgs`2.#ctor(`0,`1)">
            
             KeyValueCancelEventArgs
            
             <summary>
             Initializes a new instance of the KeyValueCancelEventArgs class
             with the specified key and value. The Cancel property is set
             to false.
             </summary>
            
             <param name="key">Key to use for the event.</param>
             <param name="value">Value to use for the event.</param>
            
        </member>
        <member name="M:Cube.KeyValueCancelEventArgs`2.#ctor(`0,`1,System.Boolean)">
            
             KeyValueCancelEventArgs
            
             <summary>
             Initializes a new instance of the KeyValueCancelEventArgs class
             with the specified arguments.
             </summary>
            
             <param name="key">Key to use for the event.</param>
             <param name="value">Value to use for the event.</param>
             <param name="cancel">
             true to cancel the event; otherwise, false.
             </param>
            
        </member>
        <member name="P:Cube.KeyValueCancelEventArgs`2.Key">
            
             Key
            
             <summary>
             Gets a key to use for the event.
             </summary>
            
        </member>
        <member name="T:Cube.KeyValueEventHandler`2">
            
             KeyValueEventHandler(T, U)
            
             <summary>
             Represents the method to invoke an event.
             </summary>
            
        </member>
        <member name="T:Cube.KeyValueCanelEventHandler`2">
            
             KeyValueCanelEventHandler(T, U)
            
             <summary>
             Represents the method to invoke an event.
             </summary>
            
        </member>
        <member name="T:Cube.ValueEventArgs">
            
             ValueEventArgs
            
             <summary>
             Provides methods to create a new instance of the ValueEventArgs(T),
             ValueCancelEventArgs(T), or ValueChangedEventArgs(T) classes.
             </summary>
            
        </member>
        <member name="M:Cube.ValueEventArgs.Create``1(``0)">
            
             Create
            
             <summary>
             Creates a new instance of the ValueEventArgs(T) class with the
             specified value.
             </summary>
            
             <param name="value">Value to use for the event.</param>
            
        </member>
        <member name="M:Cube.ValueEventArgs.Create``1(``0,System.Boolean)">
            
             Create
            
             <summary>
             Creates a new instance of the ValueCancelEventArgs(T) class
             with the specified arguments.
             </summary>
            
             <param name="value">Value to use for the event.</param>
             <param name="cancel">
             true to cancel the event; otherwise, false.
             </param>
            
        </member>
        <member name="M:Cube.ValueEventArgs.Create``1(``0,``0)">
            
             Create
            
             <summary>
             Creates a new instance of the ValueChangedEventArgs(T) class
             with the specified arguments.
             </summary>
            
             <param name="oldvalue">Value before changed.</param>
             <param name="newvalue">Value after changed.</param>
             
             <remarks>
             bool 型の値を指定すると ValueCancelEventArgs(T) のオブジェクトが
             生成される場合があります。
             </remarks>
            
        </member>
        <member name="T:Cube.ValueEventArgs`1">
            
             ValueEventArgs(T)
            
             <summary>
             Provides a value of type T to use for events.
             </summary>
            
        </member>
        <member name="M:Cube.ValueEventArgs`1.#ctor(`0)">
            
             ValueEventArgs
            
             <summary>
             Initializes a new instance of the ValueEventArgs class with
             the specified value.
             </summary>
            
             <param name="value">Value to use for the event.</param>
            
        </member>
        <member name="P:Cube.ValueEventArgs`1.Value">
            
             Value
            
             <summary>
             Gets a value to use for the event.
             </summary>
            
        </member>
        <member name="T:Cube.ValueCancelEventArgs`1">
            
             ValueCancelEventArgs(T)
            
             <summary>
             Provides data for a cancelable event with a value of type T.
             </summary>
            
        </member>
        <member name="M:Cube.ValueCancelEventArgs`1.#ctor(`0)">
            
             ValueCancelEventArgs
            
             <summary>
             Initializes a new instance of the ValueCancelEventArgs class
             with the specified value. The Cancel property is set to
             false.
             </summary>
            
             <param name="value">Value to use for the event.</param>
            
        </member>
        <member name="M:Cube.ValueCancelEventArgs`1.#ctor(`0,System.Boolean)">
            
             ValueCancelEventArgs
            
             <summary>
             Initializes a new instance of the ValueCancelEventArgs class
             with the specified arguments.
             </summary>
            
             <param name="value">Value to use for the event.</param>
             <param name="cancel">
             true to cancel the event; otherwise, false.
             </param>
            
        </member>
        <member name="P:Cube.ValueCancelEventArgs`1.Value">
            
             Value
            
             <summary>
             値を取得します。
             </summary>
            
        </member>
        <member name="T:Cube.ValueChangedEventArgs`1">
            
             ValueChangedEventArgs(T)
            
             <summary>
             Provides values that represent before and after changing for user
             events.
             </summary>
            
        </member>
        <member name="M:Cube.ValueChangedEventArgs`1.#ctor(`0,`0)">
            
             ValueChangedEventArgs(T)
            
             <summary>
             Initializes a new instance of the ValueChangedEventArgs class
             with the specified arguments.
             </summary>
            
             <param name="oldvalue">Value before changed.</param>
             <param name="newvalue">Value after changed.</param>
            
        </member>
        <member name="P:Cube.ValueChangedEventArgs`1.OldValue">
            
             OldValue
            
             <summary>
             Gets a value before changed by the event.
             </summary>
            
        </member>
        <member name="P:Cube.ValueChangedEventArgs`1.NewValue">
            
             NewValue
            
             <summary>
             Gets a value after changed by the event.
             </summary>
            
        </member>
        <member name="T:Cube.ValueEventHandler`1">
            
             ValueEventHandler(T)
            
             <summary>
             Represents the method to invoke an event.
             </summary>
            
        </member>
        <member name="T:Cube.ValueCancelEventHandler`1">
            
             ValueCancelEventHandler(T)
            
             <summary>
             Represents the method to invoke an event.
             </summary>
            
        </member>
        <member name="T:Cube.ValueChangedEventHandler`1">
            
             ValueChangedEventHandler(T)
            
             <summary>
             Represents the method to invoke an event.
             </summary>
            
        </member>
        <member name="T:Cube.Invoker">
            
             Invoker
            
             <summary>
             Provides functionality to invoke the provided action.
             </summary>
            
        </member>
        <member name="M:Cube.Invoker.#ctor">
            
             Invoker
            
             <summary>
             Initializes a new instance of the Invoker class.
             </summary>
            
        </member>
        <member name="P:Cube.Invoker.Vanilla">
            
             Vanilla
            
             <summary>
             Gets the invoker that invokes the provided action directly.
             </summary>
            
        </member>
        <member name="M:Cube.Invoker.Invoke(System.Action)">
            
             Invoke
            
             <summary>
             Invokes the specified action.
             </summary>
            
             <param name="action">Invoked action.</param>
            
        </member>
        <member name="T:Cube.ContextInvoker">
            
             ContextInvoker
            
             <summary>
             Provides functionality to invoke the provided action with a
             SynchronizationContext object.
             </summary>
            
        </member>
        <member name="M:Cube.ContextInvoker.#ctor(System.Boolean)">
            
             ContextInvoker
            
             <summary>
             Initializes a new instance of the ContextInvoker class with
             the specified arguments.
             </summary>
            
             <param name="synchronous">
             Value indicating to invoke the provided action with the
             synchronous method.
             </param>
            
             <exception cref="T:System.ArgumentNullException">
             SynchronizationContext.Current is null.
             </exception>
            
        </member>
        <member name="M:Cube.ContextInvoker.#ctor(System.Threading.SynchronizationContext,System.Boolean)">
            
             ContextInvoker
            
             <summary>
             Initializes a new instance of the ContextInvoker class with
             the specified arguments.
             </summary>
            
             <param name="context">Synchronization context.</param>
             <param name="synchronous">
             Value indicating to invoke the provided action with the
             synchronous method.
             </param>
            
             <exception cref="T:System.ArgumentNullException">
             Specified SynchronizationContext object is null.
             </exception>
            
        </member>
        <member name="P:Cube.ContextInvoker.Synchronous">
            
             Synchronous
            
             <summary>
             Gets or sets the value indicating whether the event is fired
             as synchronously.
             </summary>
            
             <remarks>
             Uses the Send method if the property is set to true;
             otherwise uses the Post method.
             </remarks>
            
        </member>
        <member name="P:Cube.ContextInvoker.Context">
            
             Context
            
             <summary>
             Gets the synchronization context.
             </summary>
            
        </member>
        <member name="M:Cube.ContextInvoker.Invoke(System.Action)">
            
             Invoke
            
             <summary>
             Invokes the specified action with the Synchronization context.
             </summary>
            
             <param name="action">Invoked action.</param>
            
        </member>
        <member name="T:Cube.VanillaInvoker">
            
             VanillaInvoker
            
             <summary>
             Provides functionality to invoke the provided action directly.
             </summary>
            
        </member>
        <member name="M:Cube.VanillaInvoker.Invoke(System.Action)">
            
             Invoke
            
             <summary>
             Invokes the specified action.
             </summary>
            
             <param name="action">Invoked action.</param>
            
        </member>
        <member name="T:Cube.Language">
            
             Language
            
             <summary>
             Specifies kinds of language.
             </summary>
            
             <seealso href="https://msdn.microsoft.com/ja-jp/library/cc392381.aspx" />
            
        </member>
        <member name="F:Cube.Language.Auto">
            <summary>Same as the system locale</summary>
        </member>
        <member name="F:Cube.Language.English">
            <summary>English</summary>
        </member>
        <member name="F:Cube.Language.Japanese">
            <summary>Japanese</summary>
        </member>
        <member name="F:Cube.Language.German">
            <summary>German</summary>
        </member>
        <member name="F:Cube.Language.Spanish">
            <summary>Spanish</summary>
        </member>
        <member name="F:Cube.Language.French">
            <summary>French</summary>
        </member>
        <member name="F:Cube.Language.Russian">
            <summary>Russian</summary>
        </member>
        <member name="F:Cube.Language.Portuguese">
            <summary>Portuguese</summary>
        </member>
        <member name="T:Cube.LanguageExtension">
            
             LanguageExtension
            
             <summary>
             Provides extended methods for the Language enum.
             </summary>
            
        </member>
        <member name="M:Cube.LanguageExtension.#cctor">
            
             LanguageExtension
            
             <summary>
             Initializes static fields.
             </summary>
            
        </member>
        <member name="M:Cube.LanguageExtension.ToCultureInfo(Cube.Language)">
            
             ToCultureInfo
            
             <summary>
             Gets the CultureInfo object from the specified value.
             </summary>
            
             <param name="src">Language value.</param>
            
             <returns>CultureInfo object.</returns>
            
        </member>
        <member name="T:Cube.Locale">
            
             Locale
            
             <summary>
             Provides the event trigger to changed the locale.
             </summary>
            
             <seealso href="https://msdn.microsoft.com/ja-jp/library/cc392381.aspx" />
            
        </member>
        <member name="M:Cube.Locale.#cctor">
            
             Locale
            
             <summary>
             Initializes static fields.
             </summary>
            
        </member>
        <member name="M:Cube.Locale.Get">
            
             Get
            
             <summary>
             Sets the current language.
             </summary>
            
        </member>
        <member name="M:Cube.Locale.Set(Cube.Language)">
            
             Set
            
             <summary>
             Sets the specified language as the current locale.
             </summary>
            
             <param name="value">Language.</param>
            
        </member>
        <member name="M:Cube.Locale.Subscribe(System.Action{Cube.Language})">
            
             Subscribe
            
             <summary>
             Adds the specified callback to the subscription.
             </summary>
            
             <param name="callback">
             Callback action when the locale changes.
             </param>
            
             <returns>
             Object to remove the registered callback.
             </returns>
            
        </member>
        <member name="M:Cube.Locale.Configure">
            
             Configure
            
             <summary>
             Resets the setter function.
             </summary>
            
        </member>
        <member name="M:Cube.Locale.Configure(Cube.Accessor{Cube.Language})">
            
             Configure
            
             <summary>
             Updates the accessor of the language.
             </summary>
            
             <param name="accessor">Accessor object.</param>
            
        </member>
        <member name="T:Cube.Logger">
            
             Logger
            
             <summary>
             Provides methods for logging.
             </summary>
            
        </member>
        <member name="P:Cube.Logger.Separator">
            
             Separator
            
             <summary>
             Gets or sets values to separate words.
             </summary>
            
        </member>
        <member name="M:Cube.Logger.ObserveTaskException">
            
             ObserveTaskException
            
             <summary>
             Observes UnobservedTaskException exceptions and outputs to the
             log file.
             </summary>
            
             <returns>Disposable object to stop to monitor.</returns>
            
        </member>
        <member name="M:Cube.Logger.Debug(System.Type,System.String[])">
            
             Debug
            
             <summary>
             Outputs log as DEBUG level.
             </summary>
            
             <param name="type">Target type information.</param>
             <param name="values">User messages.</param>
            
        </member>
        <member name="M:Cube.Logger.Debug(System.Type,System.Exception)">
            
             Debug
            
             <summary>
             Outputs log as DEBUG level.
             </summary>
            
             <param name="type">Target type information.</param>
             <param name="error">Exception object.</param>
            
        </member>
        <member name="M:Cube.Logger.Debug``1(System.Type,System.Func{``0},System.String)">
            
             Debug
            
             <summary>
             Monitors the running time and outputs it as DEBUG level.
             </summary>
            
             <param name="type">Target type information.</param>
             <param name="func">Function to monitor.</param>
             <param name="message">Method name or message.</param>
            
             <returns>Function result.</returns>
            
        </member>
        <member name="M:Cube.Logger.Debug(System.Type,System.Action,System.String)">
            
             Debug
            
             <summary>
             Monitors the running time and outputs it as DEBUG level.
             </summary>
            
             <param name="type">Target type information.</param>
             <param name="message">Message string.</param>
             <param name="action">Action to monitor.</param>
            
        </member>
        <member name="M:Cube.Logger.Info(System.Type,System.String[])">
            
             Info
            
             <summary>
             Outputs log as INFO level.
             </summary>
            
             <param name="type">Target type information.</param>
             <param name="values">User messages.</param>
            
        </member>
        <member name="M:Cube.Logger.Info(System.Type,System.Exception)">
            
             Info
            
             <summary>
             Outputs log as INFO level.
             </summary>
            
             <param name="type">Target type information.</param>
             <param name="error">Exception object.</param>
            
        </member>
        <member name="M:Cube.Logger.Info(System.Type,System.Reflection.Assembly)">
            
             Info
            
             <summary>
             Outputs system information as INFO level.
             </summary>
            
             <param name="type">Target type information.</param>
             <param name="assembly">Assembly object.</param>
            
        </member>
        <member name="M:Cube.Logger.Warn(System.Type,System.String[])">
            
             Warn
            
             <summary>
             Outputs log as WARN level.
             </summary>
            
             <param name="type">Target type information.</param>
             <param name="values">User messages.</param>
            
        </member>
        <member name="M:Cube.Logger.Warn(System.Type,System.Exception)">
            
             Warn
            
             <summary>
             Outputs log as WARN level.
             </summary>
            
             <param name="type">Target type information.</param>
             <param name="error">Exception object.</param>
            
        </member>
        <member name="M:Cube.Logger.Warn``1(System.Type,System.Func{``0},``0)">
            
             Warn
            
             <summary>
             Outputs log as WARN level when an exception occurs.
             </summary>
            
             <param name="type">Target type information.</param>
             <param name="func">Function to monitor.</param>
             <param name="alternative">
             Value that returns when an exception occurs.
             </param>
            
             <returns>Function result.</returns>
            
        </member>
        <member name="M:Cube.Logger.Warn(System.Type,System.Action)">
            
             Warn
            
             <summary>
             Outputs log as WARN level when an exception occurs.
             </summary>
            
             <param name="type">Target type information.</param>
             <param name="action">Function to monitor.</param>
            
        </member>
        <member name="M:Cube.Logger.Error(System.Type,System.String[])">
            
             Error
            
             <summary>
             Outputs log as ERROR level.
             </summary>
            
             <param name="type">Target type information.</param>
             <param name="values">User messages.</param>
            
        </member>
        <member name="M:Cube.Logger.Error(System.Type,System.Exception)">
            
             Error
            
             <summary>
             Outputs log as ERROR level.
             </summary>
            
             <param name="type">Target type information.</param>
             <param name="error">Exception object.</param>
            
        </member>
        <member name="M:Cube.Logger.Error``1(System.Type,System.Func{``0},``0)">
            
             Error
            
             <summary>
             Outputs log as ERROR level when an exception occurs.
             </summary>
            
             <param name="type">Target type information.</param>
             <param name="func">Function to monitor.</param>
             <param name="alternative">
             Value that returns when an exception occurs.
             </param>
            
             <returns>Function result.</returns>
            
        </member>
        <member name="M:Cube.Logger.Error(System.Type,System.Action)">
            
             Error
            
             <summary>
             Outputs log as ERROR level when an exception occurs.
             </summary>
            
             <param name="type">Target type information.</param>
             <param name="action">Function to monitor.</param>
            
        </member>
        <member name="M:Cube.Logger.Fatal(System.Type,System.String[])">
            
             Fatal
            
             <summary>
             Outputs log as FATAL level.
             </summary>
            
             <param name="type">Target type information.</param>
             <param name="values">User messages.</param>
            
        </member>
        <member name="M:Cube.Logger.Fatal(System.Type,System.Exception)">
            
             Fatal
            
             <summary>
             Outputs log as FATAL level.
             </summary>
            
             <param name="type">Target type information.</param>
             <param name="error">Exception object.</param>
            
        </member>
        <member name="M:Cube.Logger.Fatal``1(System.Type,System.Func{``0},``0)">
            
             Fatal
            
             <summary>
             Outputs log as FATAL level when an exception occurs.
             </summary>
            
             <param name="type">Target type information.</param>
             <param name="func">Function to monitor.</param>
             <param name="alternative">
             Value that returns when an exception occurs.
             </param>
            
             <returns>Function result.</returns>
            
        </member>
        <member name="M:Cube.Logger.Fatal(System.Type,System.Action)">
            
             Fatal
            
             <summary>
             Outputs log as FATAL level when an exception occurs.
             </summary>
            
             <param name="type">Target type information.</param>
             <param name="action">Function to monitor.</param>
            
        </member>
        <member name="M:Cube.Logger.GetCore(System.Type)">
            
             GetCore
            
             <summary>
             Gets the logger object.
             </summary>
            
        </member>
        <member name="M:Cube.Logger.GetMessage(System.String[])">
            
             GetMessage
            
             <summary>
             Gets the message from the specified arguments.
             </summary>
            
        </member>
        <member name="M:Cube.Logger.GetErrorMessage(System.Exception)">
            
             GetErrorMessage
            
             <summary>
             Gets the error message from the specified exception.
             </summary>
            
        </member>
        <member name="M:Cube.Logger.Invoke``1(System.Func{``0},System.Action{System.Exception},``0)">
            
             Invoke
            
             <summary>
             Invokes the specified function.
             </summary>
            
        </member>
        <member name="M:Cube.Logger.Invoke(System.Action,System.Action{System.Exception})">
            
             Invoke
            
             <summary>
             Invokes the specified action.
             </summary>
            
        </member>
        <member name="M:Cube.Logger.WhenTaskError(System.Object,System.Threading.Tasks.UnobservedTaskExceptionEventArgs)">
            
             WhenTaskError
            
             <summary>
             Occurs when the UnobservedTaskException is raised.
             </summary>
            
        </member>
        <member name="T:Cube.DialogMessage">
            
             DialogMessage
            
             <summary>
             Represents the message that is sent when showing a message box.
             </summary>
            
        </member>
        <member name="M:Cube.DialogMessage.#ctor">
            
             DialogMessage
            
             <summary>
             Initializes a new instance of the DialogMessage class.
             </summary>
            
        </member>
        <member name="P:Cube.DialogMessage.Title">
            
             Title
            
             <summary>
             Gets or sets the title displayed in the dialog.
             </summary>
            
        </member>
        <member name="P:Cube.DialogMessage.Icon">
            
             Icon
            
             <summary>
             Gets or sets the icon that is displayed by a message box.
             </summary>
            
        </member>
        <member name="P:Cube.DialogMessage.Buttons">
            
             Buttons
            
             <summary>
             Gets or sets the kind of buttons that are displayed by a
             message box.
             </summary>
            
        </member>
        <member name="M:Cube.DialogMessage.Create(System.Exception)">
            
             Create
            
             <summary>
             Creates a new instance of the DialogMessage class with the
             specified exception.
             </summary>
            
             <param name="src">Exception object.</param>
            
        </member>
        <member name="T:Cube.DialogIcon">
            
             DialogIcon
            
             <summary>
             Specifies the icon that is displayed by a message box.
             </summary>
            
        </member>
        <member name="F:Cube.DialogIcon.None">
            <summary>The message box contains no symbols.</summary>
        </member>
        <member name="F:Cube.DialogIcon.Error">
            <summary>The message box contains a symbol consisting of white X in a circle with a red background.</summary>
        </member>
        <member name="F:Cube.DialogIcon.Warning">
            <summary>The message box contains a symbol consisting of an exclamation point in a triangle with a yellow background.</summary>
        </member>
        <member name="F:Cube.DialogIcon.Information">
            <summary>The message box contains a symbol consisting of a lowercase letter i in a circle.</summary>
        </member>
        <member name="T:Cube.DialogButtons">
            
             DialogButtons
            
             <summary>
             Specifies the kind of buttons that are displayed by a message box.
             </summary>
            
        </member>
        <member name="F:Cube.DialogButtons.Ok">
            <summary>The message box displays an OK button.</summary>
        </member>
        <member name="F:Cube.DialogButtons.OkCancel">
            <summary>The message box displays OK and Cancel buttons.</summary>
        </member>
        <member name="F:Cube.DialogButtons.YesNo">
            <summary>The message box displays Yes and No buttons.</summary>
        </member>
        <member name="F:Cube.DialogButtons.YesNoCancel">
            <summary>The message box displays Yes, No, and Cancel buttons.</summary>
        </member>
        <member name="T:Cube.DialogStatus">
            
             DialogStatus
            
             <summary>
             Specifies the button that is clicked by a user.
             </summary>
            
        </member>
        <member name="F:Cube.DialogStatus.Empty">
            <summary>The message box returns no result.</summary>
        </member>
        <member name="F:Cube.DialogStatus.Ok">
            <summary>The result value of the message box is OK.</summary>
        </member>
        <member name="F:Cube.DialogStatus.Cancel">
            <summary>The result value of the message box is Cancel.</summary>
        </member>
        <member name="F:Cube.DialogStatus.Yes">
            <summary>The result value of the message box is Yes.</summary>
        </member>
        <member name="F:Cube.DialogStatus.No">
            <summary>The result value of the message box is No.</summary>
        </member>
        <member name="T:Cube.DialogStatusExtension">
            
             DialogStatusExtension
            
             <summary>
             Specifies the button that is clicked by a user.
             </summary>
            
        </member>
        <member name="M:Cube.DialogStatusExtension.Any(Cube.DialogStatus,Cube.DialogStatus,Cube.DialogStatus[])">
            
             Any
            
             <summary>
             Determines whether to match any of the specified values.
             </summary>
            
             <param name="src">Source value.</param>
             <param name="value">Value to be checked.</param>
             <param name="more">Values to be checked.</param>
            
             <returns>true for match; otherwise false.</returns>
            
        </member>
        <member name="T:Cube.OpenDirectoryMessage">
            
             OpenDirectoryMessage
            
             <summary>
             Represents information to show the FolderBrowserDialog.
             </summary>
            
        </member>
        <member name="M:Cube.OpenDirectoryMessage.#ctor">
            
             OpenDirectoryMessage
            
             <summary>
             Initializes a new instance of the OpenDirectoryMessage class.
             </summary>
            
        </member>
        <member name="P:Cube.OpenDirectoryMessage.NewButton">
            
             NewButton
            
             <summary>
             Gets or sets a value indicating whether the New Folder button
             appears in the FolderBrowserDialog.
             </summary>
            
        </member>
        <member name="T:Cube.OpenOrSaveFileMessage`1">
            
             OpenOrSaveFileMessage(TValue)
            
             <summary>
             Represents shared information to show either the OpenFileDialog
             or SaveFileDialog.
             </summary>
            
        </member>
        <member name="M:Cube.OpenOrSaveFileMessage`1.#ctor">
            
             OpenOrSaveFileMessage
            
             <summary>
             Initializes a new instance of the OpenOrSaveFileMessage class.
             </summary>
            
        </member>
        <member name="P:Cube.OpenOrSaveFileMessage`1.CheckPathExists">
            
             CheckPathExists
            
             <summary>
             Gets or sets a value indicating whether a file dialog
             displays a warning if the user specifies a file name that
             does not exist.
             </summary>
            
        </member>
        <member name="P:Cube.OpenOrSaveFileMessage`1.InitialDirectory">
            
             InitialDirectory
            
             <summary>
             Gets or sets the initial directory that is displayed by a file
             dialog.
             </summary>
            
        </member>
        <member name="P:Cube.OpenOrSaveFileMessage`1.Filter">
            
             Filter
            
             <summary>
             Gets or sets the filter string that determines what types of
             files are displayed from a from dialog.
             </summary>
            
        </member>
        <member name="P:Cube.OpenOrSaveFileMessage`1.FilterIndex">
            
             FilterIndex
            
             <summary>
             Gets or sets a value to select the initial filter.
             </summary>
            
        </member>
        <member name="T:Cube.OpenFileMessage">
            
             OpenFileMessage
            
             <summary>
             Represents information to show the OpenFileDialog.
             </summary>
            
        </member>
        <member name="M:Cube.OpenFileMessage.#ctor">
            
             OpenFileMessage
            
             <summary>
             Initializes a new instance of the OpenFileMessage class.
             </summary>
            
        </member>
        <member name="P:Cube.OpenFileMessage.Multiselect">
            
             Multiselect
            
             <summary>
             Gets or sets an option indicating whether the OpenFileDialog
             allows users to select multiple files.
             </summary>
            
        </member>
        <member name="T:Cube.SaveFileMessage">
            
             SaveFileMessage
            
             <summary>
             Represents information to show the SaveFileDialog.
             </summary>
            
        </member>
        <member name="M:Cube.SaveFileMessage.#ctor">
            
             SaveFileMessage
            
             <summary>
             Initializes a new instance of the SaveFileMessage class.
             </summary>
            
        </member>
        <member name="P:Cube.SaveFileMessage.OverwritePrompt">
            
             OverwritePrompt
            
             <summary>
             Gets or sets a value indicating whether SaveFileDialog displays
             a warning if the user specifies the name of a file that already
             exists.
             </summary>
            
        </member>
        <member name="T:Cube.Message`1">
            
             Message(TValue)
            
             <summary>
             Represents the common message.
             </summary>
            
        </member>
        <member name="P:Cube.Message`1.Text">
            
             Text
            
             <summary>
             Gets or sets a text for the message.
             </summary>
            
        </member>
        <member name="P:Cube.Message`1.Value">
            
             Value
            
             <summary>
             Gets or sets the user defined value.
             </summary>
            
        </member>
        <member name="T:Cube.CancelMessage`1">
            
             CancelMessage
            
             <summary>
             Represents the message with Cancel property.
             </summary>
            
        </member>
        <member name="P:Cube.CancelMessage`1.Cancel">
            
             Cancel
            
             <summary>
             Gets or sets a value indicating whether to cancel the operation.
             </summary>
            
        </member>
        <member name="T:Cube.QueryMessage`2">
            
             QueryMessage(TSource, TValue)
            
             <summary>
             Represents the message that has Query, Value (result), and Cancel
             properties.
             </summary>
            
        </member>
        <member name="P:Cube.QueryMessage`2.Source">
            
             Source
            
             <summary>
             Gets or sets the source information at the time of query.
             </summary>
            
        </member>
        <member name="T:Cube.CloseMessage">
            
             CloseMessage
            
             <summary>
             Represents the message that is sent when closing a window.
             </summary>
            
        </member>
        <member name="T:Cube.ApplyMessage">
            
             ApplyMessage
            
             <summary>
             Represents the message that is sent when setting the current
             values to the associated model objects.
             </summary>
            
        </member>
        <member name="T:Cube.Mixin.Assembly.Extension">
            
             Extension
            
             <summary>
             Provides extended methods of the Assembly class.
             </summary>
            
        </member>
        <member name="M:Cube.Mixin.Assembly.Extension.GetVersion(System.Reflection.Assembly)">
            
             GetVersion
            
             <summary>
             Gets the version information of the specified assembly.
             </summary>
            
             <param name="src">Assembly object.</param>
            
             <returns>Version information.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Assembly.Extension.GetFileVersion(System.Reflection.Assembly)">
            
             GetFileVersion
            
             <summary>
             Gets the file version information of the specified assembly.
             </summary>
            
             <param name="src">Assembly object.</param>
            
             <returns>Version information.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Assembly.Extension.GetNameString(System.Reflection.Assembly)">
            
             GetNameString
            
             <summary>
             Gets the name of the specified assembly.
             </summary>
            
             <param name="src">Assembly object.</param>
            
             <returns>String value of the assembly name.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Assembly.Extension.GetLocation(System.Reflection.Assembly)">
            
             GetLocation
            
             <summary>
             Gets the path that is the specified assembly is located.
             </summary>
            
             <param name="src">Assembly object.</param>
            
             <returns>Path of the location.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Assembly.Extension.GetFileName(System.Reflection.Assembly)">
            
             GetDirectoryName
            
             <summary>
             Gets the filename of the specified assembly.
             </summary>
            
             <param name="src">Assembly object.</param>
            
             <returns>Filename value.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Assembly.Extension.GetDirectoryName(System.Reflection.Assembly)">
            
             GetDirectoryName
            
             <summary>
             Gets the directory path that the specified assembly is located.
             </summary>
            
             <param name="src">Assembly object.</param>
            
             <returns>Path of the located directory.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Assembly.Extension.GetTitle(System.Reflection.Assembly)">
            
             GetTitle
            
             <summary>
             Gets the title of the specified assembly.
             </summary>
            
             <param name="src">Assembly object.</param>
            
             <returns>Title value.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Assembly.Extension.GetDescription(System.Reflection.Assembly)">
            
             GetDescription
            
             <summary>
             Gets the description of the specified assembly.
             </summary>
            
             <param name="src">Assembly object.</param>
            
             <returns>Description value.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Assembly.Extension.GetCompany(System.Reflection.Assembly)">
            
             GetCompany
            
             <summary>
             Gets the company name of the specified assembly.
             </summary>
            
             <param name="src">Assembly object.</param>
            
             <returns>Company name.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Assembly.Extension.GetProduct(System.Reflection.Assembly)">
            
             GetProduct
            
             <summary>
             Gets the product name of the specified assembly.
             </summary>
            
             <param name="src">Assembly object.</param>
            
             <returns>Product name.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Assembly.Extension.GetCopyright(System.Reflection.Assembly)">
            
             GetCopyright
            
             <summary>
             Gets the copyright description of the specified assembly.
             </summary>
            
             <param name="src">Assembly object.</param>
            
             <returns>Copyright description.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Assembly.Extension.GetTrademark(System.Reflection.Assembly)">
            
             GetTrademark
            
             <summary>
             Gets the trademark description of the specified assembly.
             </summary>
            
             <param name="src">Assembly object.</param>
            
             <returns>Trademark description.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Assembly.Extension.GetConfiguration(System.Reflection.Assembly)">
            
             GetConfiguration
            
             <summary>
             Gets the configuration value of the specified assembly.
             </summary>
            
             <param name="src">Assembly object.</param>
            
             <returns>Configuration value.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Assembly.Extension.GetCulture(System.Reflection.Assembly)">
            
             GetCulture
            
             <summary>
             Gets the culture value of the specified assembly.
             </summary>
            
             <param name="src">Assembly object.</param>
            
             <returns>Culture value.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Assembly.Extension.GetArchitecture(System.Reflection.Assembly)">
            
             GetArchitecture
            
             <summary>
             Gets the architecture value of the specified assembly.
             </summary>
            
             <param name="src">Assembly object.</param>
            
             <returns>32bit or 64bit</returns>
            
        </member>
        <member name="M:Cube.Mixin.Assembly.Extension.Get``1(System.Reflection.Assembly)">
            
             Get
            
             <summary>
             Gets the object by using the GetCustomAttribute method.
             </summary>
            
        </member>
        <member name="M:Cube.Mixin.Assembly.Extension.Unify(System.String)">
            
             Unify
            
             <summary>
             Converts a null or empty string to the empty one.
             </summary>
            
        </member>
        <member name="T:Cube.Mixin.ByteFormat.Extension">
            
             Extension
            
             <summary>
             Provides extended methods to convert the byte size to pretty
             readable string.
             </summary>
            
        </member>
        <member name="M:Cube.Mixin.ByteFormat.Extension.ToPrettyBytes(System.Int64)">
            
             ToPrettyBytes
            
             <summary>
             Convert the specified byte size to pretty readable string.
             </summary>
            
             <param name="bytes">Byte size.</param>
            
             <returns>String that represents the byte size.</returns>
            
        </member>
        <member name="M:Cube.Mixin.ByteFormat.Extension.ToRoughBytes(System.Int64)">
            
             ToRoughBytes
            
             <summary>
             Convert the specified byte size to readable string in an
             Explorer manner.
             </summary>
            
             <param name="bytes">Byte size.</param>
            
             <returns>String that represents the byte size.</returns>
            
             <remarks>
             Windows の Explorer 等のように 1024 バイト未満の値を "1 KB" と
             出力します。
             </remarks>
            
        </member>
        <member name="T:Cube.Mixin.Collections.DictionaryExtension">
            
             DictionaryExtension
            
             <summary>
             Provides extended methods of the IDictionary(T, U) class.
             </summary>
            
        </member>
        <member name="M:Cube.Mixin.Collections.DictionaryExtension.AddOrSet``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            
             AddOrSet(T, U)
            
             <summary>
             Adds or sets the specified key-value pair.
             </summary>
            
             <param name="src">Dictionary collection.</param>
             <param name="key">Key element to be set.</param>
             <param name="value">Value element to be set.</param>
            
        </member>
        <member name="M:Cube.Mixin.Collections.DictionaryExtension.AddOrSet``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,System.Func{``1,``1,``1})">
            
             AddOrSet(T, U)
            
             <summary>
             Adds or sets the specified key-value pair.
             </summary>
            
             <param name="src">Dictionary collection.</param>
             <param name="key">Key element to be set.</param>
             <param name="value">Value element to be set.</param>
             <param name="selector">
             Function object to select which value is set.
             </param>
            
        </member>
        <member name="T:Cube.Mixin.Collections.DifferenceExtension">
            
             DifferenceExtension
            
             <summary>
             Provides extended methods to get diff between the two sequences.
             </summary>
            
        </member>
        <member name="M:Cube.Mixin.Collections.DifferenceExtension.Diff``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            
             Diff(T)
            
             <summary>
             Returns diff between the two sequences.
             </summary>
            
             <param name="newer">Newer sequence.</param>
             <param name="older">Older sequence.</param>
            
             <returns>Diff result.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Collections.DifferenceExtension.Diff``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},Cube.Collections.Differences.Condition)">
            
             Diff(T)
            
             <summary>
             Returns diff between the two sequences.
             </summary>
            
             <param name="newer">Newer sequence.</param>
             <param name="older">Older sequence.</param>
             <param name="mask">Mask to filter the results.</param>
            
             <returns>Diff result.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Collections.DifferenceExtension.Diff``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            
             Diff(T)
            
             <summary>
             Returns diff between the two sequences.
             </summary>
            
             <param name="newer">Newer sequence.</param>
             <param name="older">Older sequence.</param>
             <param name="comparer">Comparer object.</param>
            
             <returns>Diff result.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Collections.DifferenceExtension.Diff``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},Cube.Collections.Differences.Condition)">
            
             Diff(T)
            
             <summary>
             Returns diff between the two sequences.
             </summary>
            
             <param name="newer">Newer sequence.</param>
             <param name="older">Older sequence.</param>
             <param name="comparer">Comparer object.</param>
             <param name="mask">Mask to filter the results.</param>
            
             <returns>Diff result.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Collections.DifferenceExtension.Diff``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            
             Diff(T)
            
             <summary>
             Returns diff between the two sequences.
             </summary>
            
             <param name="newer">Newer sequence.</param>
             <param name="older">Older sequence.</param>
             <param name="compare">Function to compare each element.</param>
            
             <returns>Diff result.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Collections.DifferenceExtension.Diff``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean},Cube.Collections.Differences.Condition)">
            
             Diff(T)
            
             <summary>
             Returns diff between the two sequences.
             </summary>
            
             <param name="newer">Newer sequence.</param>
             <param name="older">Older sequence.</param>
             <param name="compare">Function to compare each element.</param>
             <param name="mask">Mask to filter the results.</param>
            
             <returns>Diff result.</returns>
            
        </member>
        <member name="T:Cube.Mixin.Collections.EnumerableExtension">
            
             EnumerableExtension
            
             <summary>
             Provides extended methods of the IEnumerable(T) class.
             </summary>
            
        </member>
        <member name="M:Cube.Mixin.Collections.EnumerableExtension.GetOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            
             GetOrEmpty(T)
            
             <summary>
             Returns the specified object or empty IEnumerable(T) object.
             </summary>
            
             <param name="src">Source collection.</param>
            
             <returns>Self or empty collection.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Collections.EnumerableExtension.Compact``1(System.Collections.Generic.IEnumerable{``0})">
            
             Compact
            
             <summary>
             Removes null objects in the specified sequence.
             </summary>
            
             <param name="src">Source sequence.</param>
            
             <returns>Removed sequence.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Collections.EnumerableExtension.Concat``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            
             Concat
            
             <summary>
             Combines the specified items to the end of the specified source
             sequence.
             </summary>
            
             <param name="src">Source sequence.</param>
             <param name="items">Items to be combined.</param>
            
             <returns>Combined sequence.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Collections.EnumerableExtension.Join``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.String})">
            
             Join
            
             <summary>
             Combines the specified sequence with the specified separator.
             </summary>
            
             <param name="src">Source sequence.</param>
             <param name="separator">Concat separator.</param>
             <param name="formatter">Function to convert to string.</param>
            
             <returns>Combined string.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Collections.EnumerableExtension.Join(System.Collections.Generic.IEnumerable{System.String},System.String)">
            
             Join
            
             <summary>
             Combines the specified string sequence with the specified
             separator.
             </summary>
            
             <param name="src">Source sequence.</param>
             <param name="separator">Concat separator.</param>
            
             <returns>Combined string.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Collections.EnumerableExtension.FirstIndex``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            
             FirstIndex(T)
            
             <summary>
             Returns the first index of a sequence that satisfies a
             specified condition.
             </summary>
            
             <param name="src">Source sequence.</param>
             <param name="predicate">
             Function to test each element for a condition.
             </param>
            
             <returns>
             -1 if the sequence is empty or if no elements pass the test
             in the predicate function; otherwise, the first index that
             passes the test in the predicate function.
             </returns>
            
        </member>
        <member name="M:Cube.Mixin.Collections.EnumerableExtension.LastIndex``1(System.Collections.Generic.IEnumerable{``0})">
            
             LastIndex(T)
            
             <summary>
             Returns the last index of the specified sequence.
             </summary>
            
             <param name="src">Source sequence.</param>
            
             <returns>
             -1 if the sequence is empty; otherwise, the last index in the
             sequence.
             </returns>
            
        </member>
        <member name="M:Cube.Mixin.Collections.EnumerableExtension.LastIndex``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            
             LastIndex(T)
            
             <summary>
             Returns the last index of a sequence that satisfies a
             specified condition.
             </summary>
            
             <param name="src">Source sequence.</param>
             <param name="predicate">
             Function to test each element for a condition.
             </param>
            
             <returns>
             -1 if the sequence is empty or if no elements pass the test
             in the predicate function; otherwise, the Last index that
             passes the test in the predicate function.
             </returns>
            
        </member>
        <member name="M:Cube.Mixin.Collections.EnumerableExtension.Clamp``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            
             Clamp(T)
            
             <summary>
             Normalizes the specified index with the range of [0, Count).
             </summary>
            
             <param name="src">Source sequence.</param>
             <param name="index">Index value.</param>
            
             <returns>Normalized index.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Collections.EnumerableExtension.Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            
             Flatten
            
             <summary>
             Convert a tree structure to a one-dimensional sequence with
             breadth first search..
             </summary>
            
             <param name="src">Source sequence.</param>
             <param name="func">Conversion function.</param>
            
             <returns>Converted sequence.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Collections.EnumerableExtension.Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}})">
            
             Flatten
            
             <summary>
             Convert a tree structure to a one-dimensional sequence with
             breadth first search..
             </summary>
            
        </member>
        <member name="T:Cube.Mixin.Collections.IndicesExtension">
            
             IndicesExtension
            
             <summary>
             Provides extended methods of the IEnumerable(int) class.
             </summary>
            
        </member>
        <member name="M:Cube.Mixin.Collections.IndicesExtension.OrderBy(System.Collections.Generic.IEnumerable{System.Int32})">
            
             OrderBy
            
             <summary>
             Sorts the elements of a sequence in ascending order.
             </summary>
            
             <param name="src">Source sequence.</param>
            
             <returns>
             IEnumerable(int) whose elements are sorted.
             </returns>
            
        </member>
        <member name="M:Cube.Mixin.Collections.IndicesExtension.OrderByDescending(System.Collections.Generic.IEnumerable{System.Int32})">
            
             OrderByDescending
            
             <summary>
             Sorts the elements of a sequence in descending order.
             </summary>
            
             <param name="src">Source sequence.</param>
            
             <returns>
             IEnumerable(int) whose elements are sorted.
             </returns>
            
        </member>
        <member name="M:Cube.Mixin.Collections.IndicesExtension.Within(System.Collections.Generic.IEnumerable{System.Int32},System.Int32,System.Int32)">
            
             Within
            
             <summary>
             Gets the elements of a sequence that is within the range of
             [begin, end).
             </summary>
            
             <param name="src">Source sequence.</param>
             <param name="begin">Lower limit of the range.</param>
             <param name="end">
             Upper limit of the range (The value is not included).
             </param>
            
             <returns>
             IEnumerable(int) whose elements are within the [begin, end).
             </returns>
            
        </member>
        <member name="M:Cube.Mixin.Collections.IndicesExtension.Within(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            
             Within
            
             <summary>
             Gets the elements of a sequence that is within the range of
             [0, n).
             </summary>
            
             <param name="src">Source sequence.</param>
             <param name="n">
             Upper limit of the range (The value is not included).
             </param>
            
             <returns>
             IEnumerable(int) whose elements are within the [0, n).
             </returns>
            
        </member>
        <member name="T:Cube.Mixin.Iteration.Extension">
            
             Extension
            
             <summary>
             Provides extended methods about iteration.
             </summary>
            
        </member>
        <member name="M:Cube.Mixin.Iteration.Extension.Make``1(System.Int32,System.Func{System.Int32,``0})">
            
             Make
            
             <summary>
             Makes the specified number of sequence with the specified
             function.
             </summary>
            
             <param name="n">Number of sequence.</param>
             <param name="func">Function to create an element.</param>
            
        </member>
        <member name="T:Cube.Mixin.Environment.Extension">
            
             Extension
            
             <summary>
             Provides extended methods of the Environment class.
             </summary>
            
        </member>
        <member name="M:Cube.Mixin.Environment.Extension.GetName(System.Environment.SpecialFolder)">
            
             GetName
            
             <summary>
             Gets the directory name corresponding to the specified value.
             </summary>
            
             <param name="src">
             Value that represents the special folder.
             </param>
            
             <returns>Directory name.</returns>
            
        </member>
        <member name="T:Cube.Mixin.Generics.Extension">
            
             Extension
            
             <summary>
             Provides extended methods of generic classes.
             </summary>
            
        </member>
        <member name="M:Cube.Mixin.Generics.Extension.TryCast``1(System.Object)">
            
             TryCast
            
             <summary>
             Tries to cast the specified object to the specified type.
             </summary>
            
             <typeparam name="T">Type to be cast.</typeparam>
            
             <param name="src">Source object.</param>
            
             <returns>Casted object.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Generics.Extension.TryCast``1(System.Object,``0)">
            
             TryCast
            
             <summary>
             Tries to cast the specified object to the specified type.
             </summary>
            
             <typeparam name="T">Type to be cast.</typeparam>
            
             <param name="src">Source object.</param>
             <param name="error">
             Returned object when the cast is failed.
             </param>
            
             <returns>Casted object.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Generics.Extension.Copy``1(``0)">
            
             Copy
            
             <summary>
             Creates a new instance of the type T class and copies values
             from public properties and fields of the specified object.
             </summary>
            
             <typeparam name="T">Type of object to be created.</typeparam>
            
             <param name="src">Object to be copied.</param>
            
             <returns>Created object.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Generics.Extension.Set``1(System.Collections.Generic.IEqualityComparer{``0},``0@,``0)">
            
             Set
            
             <summary>
             Sets the specified value to the specified field if they are
             not equal.
             </summary>
            
             <typeparam name="T">
             Type of object to compare and set.
             </typeparam>
            
             <param name="src">Function to compare.</param>
             <param name="field">Reference to the target field.</param>
             <param name="value">Value being set.</param>
            
             <returns>True for done; false for cancel.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Generics.Extension.Assign``1(``0,``0)">
            
             Assign
            
             <summary>
             Copies the public properties and fields.
             </summary>
            
        </member>
        <member name="M:Cube.Mixin.Generics.Extension.CopyWithBinaryFormatter``1(``0)">
            
             CopyWithBinaryFormatter
            
             <summary>
             Copies values of properties and fields from the specified object
             with the BinaryFormatter object.
             </summary>
            
        </member>
        <member name="T:Cube.Mixin.Logging.Extension">
            
             Extension
            
             <summary>
             Provides extended methods of the Logger class.
             </summary>
            
        </member>
        <member name="M:Cube.Mixin.Logging.Extension.LogDebug``1(``0,System.String[])">
            
             LogDebug
            
             <summary>
             Outputs log as DEBUG level.
             </summary>
            
             <param name="src">Target object.</param>
             <param name="values">User messages.</param>
            
        </member>
        <member name="M:Cube.Mixin.Logging.Extension.LogDebug``1(``0,System.Exception)">
            
             LogDebug
            
             <summary>
             Outputs log as DEBUG level.
             </summary>
            
             <param name="src">Target object.</param>
             <param name="error">Exception object.</param>
            
        </member>
        <member name="M:Cube.Mixin.Logging.Extension.LogDebug``2(``0,System.Func{``1},System.String)">
            
             LogDebug
            
             <summary>
             Monitors the running time and outputs it as DEBUG level.
             </summary>
            
             <param name="src">Target object.</param>
             <param name="func">Function to monitor.</param>
             <param name="message">Method name of message.</param>
            
             <returns>Function result.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Logging.Extension.LogDebug``1(``0,System.Action,System.String)">
            
             LogDebug
            
             <summary>
             Monitors the running time and outputs it as DEBUG level.
             </summary>
            
             <param name="src">Target object.</param>
             <param name="action">Action to monitor.</param>
             <param name="message">Method name or message.</param>
            
        </member>
        <member name="M:Cube.Mixin.Logging.Extension.LogInfo``1(``0,System.String[])">
            
             LogInfo
            
             <summary>
             Outputs log as INFO level.
             </summary>
            
             <param name="src">Target object.</param>
             <param name="values">User messages.</param>
            
        </member>
        <member name="M:Cube.Mixin.Logging.Extension.LogInfo``1(``0,System.Exception)">
            
             LogInfo
            
             <summary>
             Outputs log as INFO level.
             </summary>
            
             <param name="src">Target object.</param>
             <param name="error">Exception object.</param>
            
        </member>
        <member name="M:Cube.Mixin.Logging.Extension.LogInfo``1(``0,System.Reflection.Assembly)">
            
             LogInfo
            
             <summary>
             Outputs system information as INFO level.
             </summary>
            
             <param name="src">Target object.</param>
             <param name="assembly">Assembly object.</param>
            
        </member>
        <member name="M:Cube.Mixin.Logging.Extension.LogWarn``1(``0,System.String[])">
            
             LogWarn
            
             <summary>
             Outputs log as WARN level.
             </summary>
            
             <param name="src">Target object.</param>
             <param name="values">User messages.</param>
            
        </member>
        <member name="M:Cube.Mixin.Logging.Extension.LogWarn``1(``0,System.Exception)">
            
             LogWarn
            
             <summary>
             Outputs log as WARN level.
             </summary>
            
             <param name="src">Target object.</param>
             <param name="error">Exception object.</param>
            
        </member>
        <member name="M:Cube.Mixin.Logging.Extension.LogWarn``2(``0,System.Func{``1})">
            
             LogWarn
            
             <summary>
             Outputs log as WARN level when an exception occurs.
             </summary>
            
             <param name="src">Target object.</param>
             <param name="func">Function to monitor.</param>
            
             <returns>Function result.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Logging.Extension.LogWarn``2(``0,System.Func{``1},``1)">
            
             LogWarn
            
             <summary>
             Outputs log as WARN level when an exception occurs.
             </summary>
            
             <param name="src">Target object.</param>
             <param name="func">Function to monitor.</param>
             <param name="error">
             Value that returns when an exception occurs.
             </param>
            
             <returns>Function result.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Logging.Extension.LogWarn``1(``0,System.Action)">
            
             LogWarn
            
             <summary>
             Outputs log as WARN level when an exception occurs.
             </summary>
            
             <param name="src">Target object.</param>
             <param name="action">Function to monitor.</param>
            
        </member>
        <member name="M:Cube.Mixin.Logging.Extension.LogError``1(``0,System.String[])">
            
             LogError
            
             <summary>
             Outputs log as ERROR level.
             </summary>
            
             <param name="src">Target object.</param>
             <param name="values">User messages.</param>
            
        </member>
        <member name="M:Cube.Mixin.Logging.Extension.LogError``1(``0,System.Exception)">
            
             LogError
            
             <summary>
             Outputs log as ERROR level.
             </summary>
            
             <param name="src">Target object.</param>
             <param name="error">Exception object.</param>
            
        </member>
        <member name="M:Cube.Mixin.Logging.Extension.LogError``2(``0,System.Func{``1})">
            
             LogError
            
             <summary>
             Outputs log as ERROR level when an exception occurs.
             </summary>
            
             <param name="src">Target object.</param>
             <param name="func">Function to monitor.</param>
            
             <returns>Function result.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Logging.Extension.LogError``2(``0,System.Func{``1},``1)">
            
             LogError
            
             <summary>
             Outputs log as ERROR level when an exception occurs.
             </summary>
            
             <param name="src">Target object.</param>
             <param name="func">Function to monitor.</param>
             <param name="error">
             Value that returns when an exception occurs.
             </param>
            
             <returns>Function result.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Logging.Extension.LogError``1(``0,System.Action)">
            
             LogError
            
             <summary>
             Outputs log as ERROR level when an exception occurs.
             </summary>
            
             <param name="src">Target object.</param>
             <param name="action">Function to monitor.</param>
            
        </member>
        <member name="M:Cube.Mixin.Logging.Extension.LogFatal``1(``0,System.String[])">
            
             LogFatal
            
             <summary>
             Outputs log as FATAL level.
             </summary>
            
             <param name="src">Target object.</param>
             <param name="values">User messages.</param>
            
        </member>
        <member name="M:Cube.Mixin.Logging.Extension.LogFatal``1(``0,System.Exception)">
            
             LogFatal
            
             <summary>
             Outputs log as FATAL level.
             </summary>
            
             <param name="src">Target object.</param>
             <param name="error">Exception object.</param>
            
        </member>
        <member name="M:Cube.Mixin.Logging.Extension.LogFatal``2(``0,System.Func{``1})">
            
             LogFatal
            
             <summary>
             Outputs log as FATAL level when an exception occurs.
             </summary>
            
             <param name="src">Target object.</param>
             <param name="func">Function to monitor.</param>
            
             <returns>Function result.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Logging.Extension.LogFatal``2(``0,System.Func{``1},``1)">
            
             LogFatal
            
             <summary>
             Outputs log as FATAL level when an exception occurs.
             </summary>
            
             <param name="src">Target object.</param>
             <param name="func">Function to monitor.</param>
             <param name="error">
             Value that returns when an exception occurs.
             </param>
            
             <returns>Function result.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Logging.Extension.LogFatal``1(``0,System.Action)">
            
             LogFatal
            
             <summary>
             Outputs log as FATAL level when an exception occurs.
             </summary>
            
             <param name="src">Target object.</param>
             <param name="action">Function to monitor.</param>
            
        </member>
        <member name="T:Cube.Mixin.Observing.Extension">
            
             Extension
            
             <summary>
             Provides extended methods of IObservePropertyChanged and its
             implemented classes.
             </summary>
            
        </member>
        <member name="M:Cube.Mixin.Observing.Extension.Associate``1(``0,System.ComponentModel.INotifyPropertyChanged,System.String[])">
            
             Associate
            
             <summary>
             Associates the specified observer and the specified object.
             </summary>
            
             <param name="src">Source observer.</param>
             <param name="target">Object to be observed.</param>
             <param name="names">Target property names.</param>
            
             <returns>Source observer.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Observing.Extension.Subscribe(System.ComponentModel.INotifyPropertyChanged,System.Action{System.String})">
            
             Subscribe
            
             <summary>
             Associates the specified callback to the PropertyChanged event.
             </summary>
            
             <param name="src">Source observable.</param>
             <param name="callback">
             Action to invoked when the PropertyChanged event is fired.
             </param>
            
             <returns>
             Object to remove the callback from the PropertyChanged event
             handler.
             </returns>
            
        </member>
        <member name="T:Cube.Mixin.Registry.Extension">
            
             Extension
            
             <summary>
             Provides extended methods of the Registry and related classes.
             </summary>
            
        </member>
        <member name="M:Cube.Mixin.Registry.Extension.SetValue``1(Microsoft.Win32.RegistryKey,System.String,System.String,``0)">
            
             SetValue
            
             <summary>
             Sets the specified value.
             </summary>
            
             <param name="src">Root key of the target registry.</param>
             <param name="subkey">Name of the registry subkey.</param>
             <param name="name">Name of the setting value.</param>
             <param name="value">Value to be set.</param>
            
        </member>
        <member name="M:Cube.Mixin.Registry.Extension.GetValue``1(Microsoft.Win32.RegistryKey,System.String,System.String)">
            
             GetValue
            
             <summary>
             Gets a value of type T from the specified arguments.
             </summary>
            
             <param name="src">Root key of the target registry.</param>
             <param name="subkey">Name of the registry subkey.</param>
             <param name="name">Name of the getting value.</param>
            
             <returns>Value of type T.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Registry.Extension.GetValue``1(Microsoft.Win32.RegistryKey,System.String,System.String,``0)">
            
             GetValue
            
             <summary>
             Gets a value of type T from the specified arguments.
             </summary>
            
             <param name="src">Root key of the target registry.</param>
             <param name="subkey">Name of the registry subkey.</param>
             <param name="name">Name of the getting value.</param>
             <param name="defaultValue">
             Value to be used when the specified subkey or name does not exist.
             </param>
            
             <returns>Value of type T.</returns>
            
        </member>
        <member name="T:Cube.Mixin.String.Extension">
            
             Extension
            
             <summary>
             Provides extended methods for the string class.
             </summary>
            
        </member>
        <member name="M:Cube.Mixin.String.Extension.HasValue(System.String)">
            
             HasValue
            
             <summary>
             Gets a value indicating whether the specified string contains
             one or more character.
             </summary>
            
             <param name="src">Source string.</param>
            
             <returns>true for containing one or more character.</returns>
            
        </member>
        <member name="M:Cube.Mixin.String.Extension.Unify(System.String)">
            
             Unify
            
             <summary>
             Converts a null or empty string to the empty one.
             </summary>
            
             <param name="src">Source string.</param>
            
             <returns>Converted string.</returns>
            
        </member>
        <member name="M:Cube.Mixin.String.Extension.Quote(System.String)">
            
             Quote
            
             <summary>
             Quotes the specified string.
             </summary>
            
             <param name="src">Source string.</param>
            
             <returns>Quoted string.</returns>
            
        </member>
        <member name="M:Cube.Mixin.String.Extension.FuzzyEquals(System.String,System.String)">
            
             FuzzyEquals
            
             <summary>
             Compares the specified string objects in ignoring case.
             </summary>
            
             <param name="src">Source string.</param>
             <param name="cmp">String to compare.</param>
            
             <returns>true for equal; otherwise false.</returns>
            
        </member>
        <member name="M:Cube.Mixin.String.Extension.FuzzyStartsWith(System.String,System.String)">
            
             FuzzyStartsWith
            
             <summary>
             Determines whether the beginning of this string instance
             matches the specified string in ignoring case.
             </summary>
            
             <param name="src">Source string.</param>
             <param name="cmp">String to compare.</param>
            
             <returns>true for match; otherwise, false.</returns>
            
        </member>
        <member name="M:Cube.Mixin.String.Extension.FuzzyEndsWith(System.String,System.String)">
            
             FuzzyStartsWith
            
             <summary>
             Determines whether the end of this string instance matches the
             specified string in ignoring case.
             </summary>
            
             <param name="src">Source string.</param>
             <param name="cmp">String to compare.</param>
            
             <returns>true for match; otherwise, false.</returns>
            
        </member>
        <member name="T:Cube.Mixin.Syntax.Extension">
            
             Extension
            
             <summary>
             Provides extended methods to describe basic syntax (if, for, and
             more) as an expression.
             </summary>
            
             <remarks>
             We assume that these extended methods are mainly used for the
             expression body definition.
             </remarks>
            
        </member>
        <member name="M:Cube.Mixin.Syntax.Extension.Then(System.Boolean,System.Action)">
            
             Then
            
             <summary>
             Executes the specified action if the specified value is true.
             </summary>
            
             <param name="value">true of false.</param>
             <param name="action">
             Action to be invoked if the value is true.
             </param>
            
        </member>
        <member name="M:Cube.Mixin.Syntax.Extension.Times(System.Int32,System.Action{System.Int32})">
            
             Times
            
             <summary>
             Executes the specified action in the specified number of times.
             </summary>
            
             <param name="n">Number of times.</param>
             <param name="action">User action.</param>
            
        </member>
        <member name="M:Cube.Mixin.Syntax.Extension.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            
             Each
            
             <summary>
             Executes the specified action on each item of the specified
             sequence.
             </summary>
            
             <param name="src">Source sequence.</param>
             <param name="action">User action.</param>
            
        </member>
        <member name="M:Cube.Mixin.Syntax.Extension.Try(System.Int32,System.Action{System.Int32})">
            
             Try
            
             <summary>
             Tries the specified action up to the specified number of times
             until the action succeeds.
             </summary>
            
             <param name="n">Number of trials.</param>
             <param name="action">User action.</param>
            
        </member>
        <member name="M:Cube.Mixin.Syntax.Extension.Try(System.Int32,System.Action{System.Int32},System.Action{System.Int32,System.Exception})">
            
             Try
            
             <summary>
             Tries the specified action up to the specified number of times
             until the action succeeds.
             </summary>
            
             <param name="n">Number of trials.</param>
             <param name="action">User action.</param>
             <param name="error">
             Action to be invoked when an exception occurs.
             </param>
            
        </member>
        <member name="T:Cube.Mixin.Tasks.Extension">
            
             Extension
            
             <summary>
             Provides extended methods of the Task and related classes.
             </summary>
            
        </member>
        <member name="M:Cube.Mixin.Tasks.Extension.Forget(System.Threading.Tasks.Task)">
            
             Forget
            
             <summary>
             Executes the specified task in the Fire&amp;Forget pattern.
             </summary>
            
             <param name="src">Source object.</param>
            
        </member>
        <member name="M:Cube.Mixin.Tasks.Extension.Timeout(System.Threading.Tasks.Task,System.TimeSpan)">
            
             Timeout
            
             <summary>
             Sets a timeout of executing the specified task.
             </summary>
            
             <param name="src">Source object.</param>
             <param name="value">Timeout value.</param>
            
             <returns>Task object.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Tasks.Extension.Timeout``1(System.Threading.Tasks.Task{``0},System.TimeSpan)">
            
             Timeout
            
             <summary>
             Sets a timeout of executing the specified task.
             </summary>
            
             <param name="src">Source object.</param>
             <param name="value">Timeout value.</param>
            
             <returns>Task(T) object.</returns>
            
        </member>
        <member name="T:Cube.Mixin.Time.Extension">
            
             Extension
            
             <summary>
             Provides extended methods of the DateTime and related classes.
             </summary>
            
        </member>
        <member name="M:Cube.Mixin.Time.Extension.ToUnixTime(System.DateTime)">
            
             ToUnixTime
            
             <summary>
             Converts the specified DateTime object to the UNIX time.
             </summary>
            
             <param name="src">Source object.</param>
            
             <returns>Converted UNIX time.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Time.Extension.ToUniversalTime(System.Int64)">
            
             ToUniversalTime
            
             <summary>
             Converts the specified UNIX time to the DateTime object.
             </summary>
            
             <param name="unix">UNIX time.</param>
            
             <returns>Converted object.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Time.Extension.ToUniversalTime(System.Int32)">
            
             ToUniversalTime
            
             <summary>
             Converts the specified UNIX time to the DateTime object.
             </summary>
            
             <param name="unix">UNIX time.</param>
            
             <returns>Converted object.</returns>
            
             <remarks>
             int の性質上、2106/02/07T06:28:15+0:00 までの日時しか表現
             する事ができません。
             </remarks>
            
        </member>
        <member name="M:Cube.Mixin.Time.Extension.ToUniversalTime(System.String,System.String)">
            
             ToUniversalTime
            
             <summary>
             Creates a new instance of the DateTime structure with the
             specified value and format.
             </summary>
            
             <param name="src">String value that represents the time.</param>
             <param name="format">Conversion format.</param>
            
             <returns>DateTime object.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Time.Extension.ToLocalTime(System.Int64)">
            
             ToLocalTime
            
             <summary>
             Converts the specified UNIX time to the DateTime object.
             </summary>
            
             <param name="unix">UNIX time.</param>
            
             <returns>Converted object.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Time.Extension.ToLocalTime(System.Int32)">
            
             ToLocalTime
            
             <summary>
             Converts the specified UNIX time to the DateTime object.
             </summary>
            
             <param name="unix">UNIX time.</param>
            
             <returns>Converted object.</returns>
            
             <remarks>
             int の性質上、2106/02/07T06:28:15+0:00 までの日時しか表現
             する事ができません。
             </remarks>
            
        </member>
        <member name="M:Cube.Mixin.Time.Extension.ToLocalTime(System.String,System.String)">
            
             ToLocalTime
            
             <summary>
             Creates a new instance of the DateTime structure with the
             specified value and format.
             </summary>
            
             <param name="src">String value that represents the time.</param>
             <param name="format">Conversion format.</param>
            
             <returns>DateTime object.</returns>
            
        </member>
        <member name="T:Cube.Mixin.Uri.Extension">
            
             Extension
            
             <summary>
             Provides extended methods of th Uri class.
             </summary>
            
        </member>
        <member name="M:Cube.Mixin.Uri.Extension.ToUri(System.String)">
            
             ToUri
            
             <summary>
             Creates a new instance of the Uri class with the specified
             string.
             </summary>
            
             <param name="src">String that represents a URL.</param>
            
             <returns>Uri object.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Uri.Extension.With(System.Uri,System.Collections.Generic.IDictionary{System.String,System.String})">
            
             With
            
             <summary>
             Combines the specified Uri object and queries.
             </summary>
            
             <param name="src">Source URL.</param>
             <param name="query">Queries to be combined.</param>
            
             <returns>Combined Uri object.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Uri.Extension.With``1(System.Uri,System.String,``0)">
            
             With
            
             <summary>
             Combines the specified Uri object and key-value query.
             </summary>
            
             <param name="src">Source URL.</param>
             <param name="key">Key of the query.</param>
             <param name="value">Value of the query.</param>
            
             <returns>Combined Uri object.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Uri.Extension.With(System.Uri,System.DateTime)">
            
             With
            
             <summary>
             Combines the specified Uri object and date time.
             </summary>
            
             <param name="src">Source URL.</param>
             <param name="time">Date time value.</param>
            
             <returns>Combined Uri object.</returns>
            
             <remarks>
             時刻は UnixTime に変換した上で、ts=(unix) と言う形で
             Uri オブジェクトに付与されます。
             </remarks>
            
        </member>
        <member name="M:Cube.Mixin.Uri.Extension.With(System.Uri,Cube.SoftwareVersion)">
            
             With
            
             <summary>
             Combines the specified Uri object and version information.
             </summary>
            
             <param name="src">Source URL.</param>
             <param name="version">Version information.</param>
            
             <returns>Combined Uri object.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Uri.Extension.With(System.Uri,Cube.Utm)">
            
             With
            
             <summary>
             Combines the specified Uri object and UTM queries.
             </summary>
            
             <param name="src">Source URL.</param>
             <param name="utm">UTM queries.</param>
            
             <returns>Combined Uri object.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Uri.Extension.WithoutQuery(System.Uri)">
            
             WithoutQuery
            
             <summary>
             Gets the Uri object that is removed queries from the specified
             one.
             </summary>
            
             <param name="src">Source URL.</param>
            
             <returns>Uri object that is removed queries.</returns>
            
        </member>
        <member name="T:Cube.Mixin.Xml.Extension">
            
             Extension
            
             <summary>
             Provides extended methods of the XML related classes.
             </summary>
            
        </member>
        <member name="M:Cube.Mixin.Xml.Extension.GetElement(System.Xml.Linq.XElement,System.String)">
            
             GetElement
            
             <summary>
             Gets the XElement object corresponding to the specified name
             in the default namespace.
             </summary>
            
             <param name="e">Source object.</param>
             <param name="name">Element name.</param>
            
             <returns>XElement object.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Xml.Extension.GetElement(System.Xml.Linq.XElement,System.String,System.String)">
            
             GetElement
            
             <summary>
             Gets the XElement object corresponding to the specified name
             and namespace. When the specified namespace is empty,
             the method uses the default namespace.
             </summary>
            
             <param name="e">Source object.</param>
             <param name="ns">Element namespace.</param>
             <param name="name">Element name.</param>
            
             <returns>XElement object.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Xml.Extension.GetElements(System.Xml.Linq.XElement,System.String)">
            
             GetElements
            
             <summary>
             Gets the collection of XElement objects corresponding to the
             specified name in the default namespace.
             </summary>
            
             <param name="e">Source object.</param>
             <param name="name">Element name.</param>
            
             <returns>Collection of XElements objects.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Xml.Extension.GetElements(System.Xml.Linq.XElement,System.String,System.String)">
            
             GetElements
            
             <summary>
             Gets the collection of XElement objects corresponding to the
             specified name and namespace. When the specified namespace is
             empty, the method uses the default namespace.
             </summary>
            
             <param name="e">Source object.</param>
             <param name="ns">Element namespace.</param>
             <param name="name">Element name.</param>
            
             <returns>Collection of XElements objects.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Xml.Extension.GetDescendants(System.Xml.Linq.XElement,System.String)">
            
             GetDecendants
            
             <summary>
             Gets the collection of descendant XElement objects corresponding
             to the specified name in the default namespace.
             </summary>
            
             <param name="e">Source object.</param>
             <param name="name">Element name.</param>
            
             <returns>Collection of XElements objects.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Xml.Extension.GetDescendants(System.Xml.Linq.XElement,System.String,System.String)">
            
             GetDecendants
            
             <summary>
             Gets the collection of descendant XElement objects corresponding
             to the specified name in the default namespace.
             When the specified namespace is empty, the method uses the
             default namespace.
             </summary>
            
             <param name="e">Source object.</param>
             <param name="ns">Element namespace.</param>
             <param name="name">Element name.</param>
            
             <returns>Collection of XElements objects.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Xml.Extension.GetValueOrAttribute(System.Xml.Linq.XElement,System.String,System.String)">
            
             GetValueOrAttribute
            
             <summary>
             Gets the value corresponding to the specified name,
             or attribute value corresponding to the specified hint in the
             default namespace.
             </summary>
            
             <param name="e">Source object.</param>
             <param name="name">Element name.</param>
             <param name="hint">Attribute name to be a hint.</param>
            
             <returns>Value or attribute.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Xml.Extension.GetValueOrAttribute(System.Xml.Linq.XElement,System.String,System.String,System.String)">
            
             GetValueOrAttribute
            
             <summary>
             Gets the value corresponding to the specified name,
             or attribute value corresponding to the specified hint in the
             specified namespace.
             </summary>
            
             <param name="e">Source object.</param>
             <param name="ns">Element namespace.</param>
             <param name="name">Element name.</param>
             <param name="hint">Attribute name to be a hint.</param>
            
             <returns>Value or attribute.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Xml.Extension.GetValueOrAttribute(System.Xml.Linq.XElement,System.String)">
            
             GetValueOrAttribute
            
             <summary>
             Gets the value of the specified element, or attribute value
             corresponding to the specified hint in the default namespace.
             </summary>
            
             <param name="e">Source object.</param>
             <param name="hint">Attribute name to be a hint.</param>
            
             <returns>Value or attribute.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Xml.Extension.GetNamespace(System.Xml.Linq.XElement,System.String)">
            
             GetNamespace
            
             <summary>
             Gets the namespace object corresponding to the specified value.
             </summary>
            
        </member>
        <member name="T:Cube.Utm">
            
             Utm
            
             <summary>
             Represents the properties that are used in the Google Analytics
             service.
             </summary>
            
             <seealso href="https://support.google.com/analytics/answer/1033863" />
            
        </member>
        <member name="P:Cube.Utm.Source">
            
             Source
            
             <summary>
             Gets or sets a value to identify the advertiser, site,
             publication, etc. that is sending traffic to your property.
             </summary>
            
        </member>
        <member name="P:Cube.Utm.Medium">
            
             Medium
            
             <summary>
             Gets or sets a value of the advertising or marketing medium.
             </summary>
            
        </member>
        <member name="P:Cube.Utm.Campaign">
            
             Campaign
            
             <summary>
             Gets or sets a value of the individual campaign name, slogan,
             promo code, etc. for a product.
             </summary>
            
        </member>
        <member name="P:Cube.Utm.Term">
            
             Term
            
             <summary>
             Gets or sets a value to identify paid search keywords.
             </summary>
            
        </member>
        <member name="P:Cube.Utm.Content">
            
             Content
            
             <summary>
             Gets or sets a value that is used to differentiate similar
             content, or links within the same ad.
             </summary>
            
        </member>
        <member name="T:Cube.ObservableBase">
            
             ObservableBase
            
             <summary>
             Represents the base class that has features of DisposableBase and
             ObservableBase classes.
             </summary>
            
        </member>
        <member name="M:Cube.ObservableBase.#ctor">
            
             ObservableBase
            
             <summary>
             Initializes a new instance of the DisposableObservable class.
             </summary>
            
        </member>
        <member name="M:Cube.ObservableBase.#ctor(Cube.Invoker)">
            
             ObservableBase
            
             <summary>
             Initializes a new instance of the ObservableBasee class
             with the specified invoker.
             </summary>
            
             <param name="invoker">Invoker object.</param>
            
        </member>
        <member name="P:Cube.ObservableBase.Invoker">
            
             Invoker
            
             <summary>
             Gets or sets the invoker object.
             </summary>
            
        </member>
        <member name="E:Cube.ObservableBase.PropertyChanged">
            
             PropertyChanged
            
             <summary>
             Occurs when a property is changed.
             </summary>
            
        </member>
        <member name="M:Cube.ObservableBase.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            
             OnPropertyChanged
            
             <summary>
             Raises the PropertyChanged event with the provided arguments.
             </summary>
            
             <param name="e">Arguments of the event being raised.</param>
            
        </member>
        <member name="M:Cube.ObservableBase.Refresh(System.String,System.String[])">
            
             Refresh
            
             <summary>
             Notifies the update of the specified properties by raising
             the PropertyChanged event.
             </summary>
            
             <param name="name">Property name.</param>
             <param name="more">More property names.</param>
            
        </member>
        <member name="M:Cube.ObservableBase.GetProperty``1(System.Func{``0},System.String)">
            
             GetProperty
            
             <summary>
             Gets the value of the specified property name. The specified
             property will be initialized with the specified creator object
             as needed.
             </summary>
            
             <param name="creator">Function to create an initial value.</param>
             <param name="name">Name of the property.</param>
            
             <returns>Value of the property.</returns>
            
        </member>
        <member name="M:Cube.ObservableBase.GetProperty``1(System.String)">
            
             GetProperty
            
             <summary>
             Gets the value of the specified property name.
             </summary>
            
             <param name="name">Name of the property.</param>
            
             <returns>Value of the property.</returns>
            
        </member>
        <member name="M:Cube.ObservableBase.SetProperty``1(``0,System.String)">
            
             SetProperty
            
             <summary>
             Sets the specified value to the inner field of the specified
             name if they are not equal.
             </summary>
            
             <param name="value">Value being set.</param>
             <param name="name">Name of the property.</param>
            
             <returns>True for done; false for cancel.</returns>
            
        </member>
        <member name="M:Cube.ObservableBase.SetProperty``1(``0,System.Collections.Generic.IEqualityComparer{``0},System.String)">
            
             SetProperty
            
             <summary>
             Sets the specified value to the inner field of the specified
             name if they are not equal.
             </summary>
            
             <param name="value">Value being set.</param>
             <param name="compare">Function to compare.</param>
             <param name="name">Name of the property.</param>
            
             <returns>True for done; false for cancel.</returns>
            
        </member>
        <member name="M:Cube.ObservableBase.SetProperty``1(``0@,``0,System.String)">
            
             SetProperty
            
             <summary>
             Sets the specified value to the specified field if they are
             not equal.
             </summary>
            
             <param name="field">Reference to the target field.</param>
             <param name="value">Value being set.</param>
             <param name="name">Name of the property.</param>
            
             <returns>True for done; false for cancel.</returns>
            
        </member>
        <member name="M:Cube.ObservableBase.SetProperty``1(``0@,``0,System.Collections.Generic.IEqualityComparer{``0},System.String)">
            
             SetProperty
            
             <summary>
             Set the specified value in the specified field if they are not
             equal.
             </summary>
            
             <param name="field">Reference to the target field.</param>
             <param name="value">Value being set.</param>
             <param name="compare">Function to compare.</param>
             <param name="name">Name of the property.</param>
            
             <returns>True for done; false for cancel.</returns>
            
        </member>
        <member name="T:Cube.IObservePropertyChanged">
            
             IObservePropertyChanged
            
             <summary>
             Provides interface to observe the PropertyChanged event of
             INotifyPropertyChanged objects.
             </summary>
            
        </member>
        <member name="M:Cube.IObservePropertyChanged.Observe(System.ComponentModel.INotifyPropertyChanged,System.String[])">
            
             Observe
            
             <summary>
             Observes the PropertyChanged event of the specified object.
             </summary>
            
             <param name="src">Observed object.</param>
             <param name="names">Target property names.</param>
            
        </member>
        <member name="T:Cube.ObserverBase">
            
             ObserverBase
            
             <summary>
             Represents a base class of the IObservePropertyChnaged interface.
             </summary>
            
        </member>
        <member name="M:Cube.ObserverBase.#ctor">
            
             ObserverBase
            
             <summary>
             Initializes a new instance of the ObserverBase class.
             </summary>
            
        </member>
        <member name="M:Cube.ObserverBase.Observe(System.ComponentModel.INotifyPropertyChanged,System.String[])">
            
             Observe
            
             <summary>
             Observes the PropertyChanged event of the specified object.
             </summary>
            
             <param name="src">Observed object.</param>
             <param name="names">
             Target property names. If no name is set, the class responds
             to all PropertyChanged events.
             </param>
            
        </member>
        <member name="M:Cube.ObserverBase.Receive(System.Type,System.String)">
            
             Receive
            
             <summary>
             Invokes when the PropertyChanged event of an observed object
             is fired.
             </summary>
            
             <param name="type">
             Type of object that raises the PropetyChanged event.
             </param>
            
             <param name="name">
             Property name associated with the PropetyChanged event.
             </param>
            
        </member>
        <member name="M:Cube.ObserverBase.Dispose(System.Boolean)">
            
             Dispose
            
             <summary>
             Releases the unmanaged resources used by the object and
             optionally releases the managed resources.
             </summary>
            
             <param name="disposing">
             true to release both managed and unmanaged resources;
             false to release only unmanaged resources.
             </param>
            
        </member>
        <member name="T:Cube.OnceAction">
            
             OnceAction
            
             <summary>
             Provides functionality to invoke the specified action once.
             </summary>
            
        </member>
        <member name="M:Cube.OnceAction.#ctor(System.Action)">
            
             OnceAction
            
             <summary>
             Initializes a new instance of the OnceAction class with the
             specified action.
             </summary>
            
             <param name="action">Action that is invoked once.</param>
            
        </member>
        <member name="M:Cube.OnceAction.Invoke">
            
             Invoke
            
             <summary>
             Invokes the specified action.
             </summary>
            
        </member>
        <member name="T:Cube.OnceAction`1">
            
             OnceAction(T)
            
             <summary>
             Initializes a new instance of the OnceAction class with the
             specified action.
             </summary>
            
        </member>
        <member name="M:Cube.OnceAction`1.#ctor(System.Action{`0})">
            
             OnceAction
            
             <summary>
             Initializes a new instance of the OnceAction class with the
             specified action.
             </summary>
            
             <param name="action">Action that is invoked once.</param>
            
        </member>
        <member name="M:Cube.OnceAction`1.Invoke(`0)">
            
             Invoke
            
             <summary>
             Invokes the specified action with the specified arguments.
             </summary>
            
             <param name="obj">Arguments of the action.</param>
            
        </member>
        <member name="T:Cube.Once`1">
            
             Once(T)
            
             <summary>
             Represents the base class of OnceAction classes.
             </summary>
            
        </member>
        <member name="M:Cube.Once`1.#ctor(`0)">
            
             Once
            
             <summary>
             Initializes a new instance of the Once class with the specified
             value.
             </summary>
            
             <param name="value">Value to be invoked once.</param>
            
        </member>
        <member name="P:Cube.Once`1.IgnoreTwice">
            
             IgnoreTwice
            
             <summary>
             Gets or sets a value indicating whether to ignore the second
             or later call. If set to false, TwiceException will be thrown
             on the second or later.
             </summary>
            
        </member>
        <member name="P:Cube.Once`1.Invoked">
            
             Invoked
            
             <summary>
             Gets a value indicating whether the provided action has been
             already invoked.
             </summary>
            
        </member>
        <member name="M:Cube.Once`1.Invoke(System.Action{`0})">
            
             Invoke
            
             <summary>
             Gets the provided value and invokes the specified callback.
             </summary>
            
             <param name="action">
             Action to be invoked only in the first call.
             </param>
            
        </member>
        <member name="T:Cube.Power">
            
             Power
            
             <summary>
             Provides functionality to observe power mode of the computer.
             </summary>
            
        </member>
        <member name="M:Cube.Power.#cctor">
            
             Power
            
             <summary>
             Initializes a static fields of the Power class.
             </summary>
            
        </member>
        <member name="P:Cube.Power.Mode">
            
             Mode
            
             <summary>
             Gets the power mode.
             </summary>
            
        </member>
        <member name="M:Cube.Power.Subscribe(System.Action)">
            
             Subscribe
            
             <summary>
             Registers the callback to subscription.
             </summary>
            
        </member>
        <member name="M:Cube.Power.Configure(Cube.PowerModeContext)">
            
             Configure
            
             <summary>
             Sets the PowerModeContext object.
             </summary>
            
             <remarks>
             プログラム上で独自に Power.Mode の状態を更新する必要がある
             場合などに利用します。
             </remarks>
            
        </member>
        <member name="M:Cube.Power.WhenPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            
             WhenPropertyChanged
            
             <summary>
             Occurs when the PropertyChanged event is fired.
             </summary>
            
        </member>
        <member name="M:Cube.Power.WhenModeChanged(System.Object,Microsoft.Win32.PowerModeChangedEventArgs)">
            
             WhenModeChanged
            
             <summary>
             Occurs when the PowerModeChanged event is fired.
             </summary>
            
        </member>
        <member name="T:Cube.PowerModeContext">
            
             PowerModeContext
            
             <summary>
             Represents the power mode.
             </summary>
            
        </member>
        <member name="M:Cube.PowerModeContext.#ctor(Microsoft.Win32.PowerModes)">
            
             PowerModeContext
            
             <summary>
             Initializes a new instance of the PowerModeContext class
             with the specified value.
             </summary>
            
             <param name="mode">Initial value for power mode.</param>
            
        </member>
        <member name="P:Cube.PowerModeContext.Mode">
            
             Mode
            
             <summary>
             Gets or sets the power mode.
             </summary>
            
        </member>
        <member name="P:Cube.PowerModeContext.IgnoreStatusChanged">
            
             IgnoreStatusChanged
            
             <summary>
             Gets or sets the value indicating whether ignoring the
             StatusChanged value.
             </summary>
            
        </member>
        <member name="T:Cube.Presentable`1">
            
             Presentable
            
             <summary>
             Represents the base presentable class with a model object, which is
             the facade of other models.
             </summary>
            
        </member>
        <member name="M:Cube.Presentable`1.#ctor(`0)">
            
             Presentable
            
             <summary>
             Initializes a new instance of the Presentable class with the
             specified model.
             </summary>
            
             <param name="facade">Model object.</param>
            
        </member>
        <member name="M:Cube.Presentable`1.#ctor(`0,Cube.Aggregator)">
            
             Presentable
            
             <summary>
             Initializes a new instance of the Presentable class with the
             specified arguments.
             </summary>
            
             <param name="facade">Model object.</param>
             <param name="aggregator">Message aggregator.</param>
            
        </member>
        <member name="M:Cube.Presentable`1.#ctor(`0,Cube.Aggregator,System.Threading.SynchronizationContext)">
            
             Presentable
            
             <summary>
             Initializes a new instance of the Presentable class with the
             specified arguments.
             </summary>
            
             <param name="facade">Model object.</param>
             <param name="aggregator">Message aggregator.</param>
             <param name="context">Synchronization context.</param>
            
        </member>
        <member name="P:Cube.Presentable`1.Facade">
            
             Facade
            
             <summary>
             Gets the facade of model objects.
             </summary>
            
        </member>
        <member name="M:Cube.Presentable`1.Dispose(System.Boolean)">
            
             Dispose
            
             <summary>
             Releases the unmanaged resources used by the object and
             optionally releases the managed resources.
             </summary>
            
             <param name="disposing">
             true to release both managed and unmanaged resources;
             false to release only unmanaged resources.
             </param>
            
        </member>
        <member name="M:Cube.Presentable`1.OnMessage(System.Exception)">
            
             OnMessage
            
             <summary>
             Converts the specified exception to a new instance of the
             DialogMessage class.
             </summary>
            
             <param name="src">Source exception.</param>
            
             <returns>DialogMessage object.</returns>
            
             <remarks>
             The Method is called from the Track methods.
             </remarks>
            
        </member>
        <member name="M:Cube.Presentable`1.Track(System.Action)">
            
             Track
            
             <summary>
             Invokes the specified action as an asynchronous method, and
             will send the error message if any exceptions are thrown.
             </summary>
            
             <param name="action">
             Action to be invoked as an asynchronous method.
             </param>
            
             <returns>Task object.</returns>
            
        </member>
        <member name="M:Cube.Presentable`1.Track(System.Action,System.Boolean)">
            
             Track
            
             <summary>
             Invokes the specified action, and will send the error message
             if any exceptions are thrown.
             </summary>
            
             <param name="action">
             Action to be invoked.
             </param>
            
             <param name="synchronous">
             Value indicating whether to invoke the specified action as a
             synchronous method.
             </param>
            
        </member>
        <member name="M:Cube.Presentable`1.Send``1(Cube.Message{``0},System.Action{``0},System.Func{``0,System.Boolean})">
            
             Send
            
             <summary>
             Sends the specified message, and then invokes the specified
             action as an asynchronous method if the specified function
             returns true.
             </summary>
            
             <param name="message">Message to be sent.</param>
             <param name="next">Action to be invoked.</param>
             <param name="predicate">
             Function to determine whether to invoke the specified action.
             </param>
            
             <returns>Task object.</returns>
            
        </member>
        <member name="M:Cube.Presentable`1.Send``1(Cube.CancelMessage{``0},System.Action{``0})">
            
             Send
            
             <summary>
             Sends the specified message, and then invokes the specified
             action as an asynchronous method if the Cancel property is
             set to false.
             </summary>
            
             <param name="message">Message to be sent.</param>
             <param name="next">Action to be invoked.</param>
            
             <returns>Task object.</returns>
            
        </member>
        <member name="M:Cube.Presentable`1.TrackCore(System.Action)">
            
             TrackCore
            
             <summary>
             Invokes the specified action, and will send the error message
             if any exceptions are thrown.
             </summary>
            
        </member>
        <member name="T:Cube.IPresentable">
            
             IPresentable
            
             <summary>
             Represents the interface of presentable (Controller, Presenter,
             ViewModel, and so on) components.
             </summary>
            
        </member>
        <member name="M:Cube.IPresentable.Subscribe``1(System.Action{``0})">
            
             Subscribe
            
             <summary>
             Subscribes the message of type T.
             </summary>
            
             <typeparam name="T">message type.</typeparam>
            
             <param name="callback">
             Action to be invoked when the message of type T is published.
             </param>
            
             <returns>Object to clear the subscription.</returns>
            
        </member>
        <member name="T:Cube.PresentableBase">
            
             PresentableBase
            
             <summary>
             Represents the base behavior of presentable (Controller, Presenter,
             ViewModel, and so on) components.
             </summary>
            
        </member>
        <member name="M:Cube.PresentableBase.#ctor">
            
             PresentableBase
            
             <summary>
             Initializes a new instance of the PresentableBase class.
             </summary>
            
        </member>
        <member name="M:Cube.PresentableBase.#ctor(Cube.Aggregator)">
            
             PresentableBase
            
             <summary>
             Initializes a new instance of the PresentableBase class with
             the specified arguments.
             </summary>
            
             <param name="aggregator">Message aggregator.</param>
            
        </member>
        <member name="M:Cube.PresentableBase.#ctor(Cube.Aggregator,System.Threading.SynchronizationContext)">
            
             PresentableBase
            
             <summary>
             Initializes a new instance of the PresentableBase class with
             the specified arguments.
             </summary>
            
             <param name="aggregator">Message aggregator.</param>
             <param name="context">Synchronization context.</param>
            
        </member>
        <member name="P:Cube.PresentableBase.Aggregator">
            
             Aggregator
            
             <summary>
             Gets the message aggregator.
             </summary>
            
        </member>
        <member name="P:Cube.PresentableBase.Context">
            
             Context
            
             <summary>
             Gets the synchronization context.
             </summary>
            
        </member>
        <member name="M:Cube.PresentableBase.Subscribe``1(System.Action{``0})">
            
             Subscribe
            
             <summary>
             Subscribes the message of type T.
             </summary>
            
             <typeparam name="T">message type.</typeparam>
            
             <param name="callback">
             Action to be invoked when the message of type T is published.
             </param>
            
             <returns>Object to clear the subscription.</returns>
            
        </member>
        <member name="M:Cube.PresentableBase.Use(System.IDisposable)">
            
             Use
            
             <summary>
             Marks the specified IDisposable object as a resource of the
             class. The specified object will be released automatically
             when disposing.
             </summary>
            
             <param name="src">Disposable resource.</param>
            
        </member>
        <member name="M:Cube.PresentableBase.GetInvoker(System.Boolean)">
            
             GetInvoker
            
             <summary>
             Gets a invoker object with the specified arguments.
             </summary>
            
             <param name="synchronous">
             Value indicating whether to invoke as synchronous.
             </param>
            
             <returns>Invoker object.</returns>
            
        </member>
        <member name="M:Cube.PresentableBase.Dispose(System.Boolean)">
            
             Dispose
            
             <summary>
             Releases the unmanaged resources used by the object and
             optionally releases the managed resources.
             </summary>
            
             <param name="disposing">
             true to release both managed and unmanaged resources;
             false to release only unmanaged resources.
             </param>
            
        </member>
        <member name="M:Cube.PresentableBase.Send``1(``0)">
            
             Send
            
             <summary>
             Sends the specified message.
             </summary>
            
             <param name="message">Message to be sent.</param>
            
        </member>
        <member name="M:Cube.PresentableBase.Send``1">
            
             Send
            
             <summary>
             Sends a default message of type T.
             </summary>
            
             <typeparam name="T">Message type.</typeparam>
            
        </member>
        <member name="M:Cube.PresentableBase.Post``1(``0)">
            
             Post
            
             <summary>
             Posts the specified message.
             </summary>
            
             <param name="message">Message to be posted.</param>
            
        </member>
        <member name="M:Cube.PresentableBase.Post``1">
            
             Post
            
             <summary>
             Posts a default message of type T.
             </summary>
            
             <typeparam name="T">Message type.</typeparam>
            
        </member>
        <member name="T:Cube.IQuery`2">
            
             IQuery(T, U)
            
             <summary>
             Represents the query provider.
             </summary>
            
        </member>
        <member name="M:Cube.IQuery`2.Request(Cube.QueryMessage{`0,`1})">
            
             Request
            
             <summary>
             Invokes the request with the specified message.
             </summary>
            
             <param name="message">Message to request.</param>
            
        </member>
        <member name="T:Cube.IQuery`1">
            
             IQuery(T)
            
             <summary>
             Represents the query provider.
             </summary>
            
        </member>
        <member name="T:Cube.Query`2">
            
             Query(T, U)
            
             <summary>
             Represents the IQuery(T, U) implementation.
             </summary>
            
        </member>
        <member name="M:Cube.Query`2.#ctor(System.Action{Cube.QueryMessage{`0,`1}})">
            
             Query
            
             <summary>
             Initializes a new instance of the Query class with the
             specified callback.
             </summary>
            
             <param name="callback">Callback function.</param>
            
        </member>
        <member name="M:Cube.Query`2.#ctor(System.Action{Cube.QueryMessage{`0,`1}},Cube.Invoker)">
            
             Query
            
             <summary>
             Initializes a new instance of the Query class with the
             specified arguments.
             </summary>
            
             <param name="callback">Callback function.</param>
             <param name="invoker">Invoker object.</param>
            
        </member>
        <member name="M:Cube.Query`2.Request(Cube.QueryMessage{`0,`1})">
            
             Request
            
             <summary>
             Invokes the request with the specified message.
             </summary>
            
             <param name="message">Message to request.</param>
            
        </member>
        <member name="T:Cube.Query`1">
            
             Query(T)
            
             <summary>
             Represents the IQuery(T, T) implementation.
             </summary>
            
        </member>
        <member name="M:Cube.Query`1.#ctor(System.Action{Cube.QueryMessage{`0,`0}})">
            
             Query
            
             <summary>
             Initializes a new instance of the Query class with the
             specified callback.
             </summary>
            
             <param name="callback">Callback function.</param>
            
        </member>
        <member name="M:Cube.Query`1.#ctor(System.Action{Cube.QueryMessage{`0,`0}},Cube.Invoker)">
            
             Query
            
             <summary>
             Initializes a new instance of the Query class with the
             specified arguments.
             </summary>
            
             <param name="callback">Callback function.</param>
             <param name="invoker">Invoker object.</param>
            
        </member>
        <member name="T:Cube.OnceQuery`2">
            
             OnceQuery(T, U)
            
             <summary>
             Represents the IQuery(T, U) implementation that allows only once.
             </summary>
            
        </member>
        <member name="M:Cube.OnceQuery`2.#ctor(System.Action{Cube.QueryMessage{`0,`1}})">
            
             OnceQuery
            
             <summary>
             Initializes a new instance of the Query class with the
             specified callback.
             </summary>
            
             <param name="callback">Callback function.</param>
            
        </member>
        <member name="M:Cube.OnceQuery`2.#ctor(System.Action{Cube.QueryMessage{`0,`1}},Cube.Invoker)">
            
             OnceQuery
            
             <summary>
             Initializes a new instance of the Query class with the
             specified arguments.
             </summary>
            
             <param name="callback">Callback function.</param>
             <param name="invoker">Invoker object.</param>
            
        </member>
        <member name="M:Cube.OnceQuery`2.Request(Cube.QueryMessage{`0,`1})">
            
             Request
            
             <summary>
             Invokes the request with the specified message.
             </summary>
            
             <param name="message">Message to request.</param>
            
             <exception cref="T:Cube.TwiceException">
             Occurs when called twice.
             </exception>
            
        </member>
        <member name="T:Cube.OnceQuery`1">
            
             OnceQuery(T)
            
             <summary>
             Represents the IQuery(T) implementation that allows only once.
             </summary>
            
        </member>
        <member name="M:Cube.OnceQuery`1.#ctor(System.Action{Cube.QueryMessage{`0,`0}})">
            
             OnceQuery
            
             <summary>
             Initializes a new instance of the Query class with the
             specified callback.
             </summary>
            
             <param name="callback">Callback function.</param>
            
        </member>
        <member name="M:Cube.OnceQuery`1.#ctor(System.Action{Cube.QueryMessage{`0,`0}},Cube.Invoker)">
            
             OnceQuery
            
             <summary>
             Initializes a new instance of the Query class with the
             specified arguments.
             </summary>
            
             <param name="callback">Callback function.</param>
             <param name="invoker">Invoker object.</param>
            
        </member>
        <member name="T:Cube.QueryInvoker">
            
             QueryInvoker
            
             <summary>
             Provides functionality to create a invoker.
             </summary>
            
        </member>
        <member name="M:Cube.QueryInvoker.Create">
            
             Create
            
             <summary>
             Creates a new instance of the Invoker class.
             </summary>
            
        </member>
        <member name="T:Cube.Query">
            
             Query
            
             <summary>
             Provides functionality to create a new instance of the Query(T, U)
             or related classes.
             </summary>
            
        </member>
        <member name="M:Cube.Query.NewMessage``1(``0)">
            
             NewMessage
            
             <summary>
             Creates a new instance of the QueryMessage(T, T) class with
             the specified query.
             </summary>
            
             <typeparam name="T">type of source and result.</typeparam>
            
             <param name="src">Source information.</param>
            
             <returns>QueryMessage(T, T) object.</returns>
            
        </member>
        <member name="M:Cube.Query.NewMessage``2(``0)">
            
             NewMessage
            
             <summary>
             Creates a new instance of the QueryMessage(T, U) class with
             the specified query.
             </summary>
            
             <typeparam name="T">type of query source.</typeparam>
             <typeparam name="U">type of result value.</typeparam>
            
             <param name="src">Source information.</param>
            
             <returns>QueryMessage(T, U) object.</returns>
            
        </member>
        <member name="M:Cube.Query.NewMessage``2(``0,``1)">
            
             NewMessage
            
             <summary>
             Creates a new instance of the QueryMessage(T, U) class with
             the specified query and default value.
             </summary>
            
             <typeparam name="T">type of query source.</typeparam>
             <typeparam name="U">type of result value.</typeparam>
            
             <param name="src">Source information.</param>
             <param name="value">Default value of the message.</param>
            
             <returns>QueryMessage(T, U) object.</returns>
            
        </member>
        <member name="T:Cube.SerializableBase">
            
             SerializableBase
            
             <summary>
             Provides an implementation of the INotifyPropertyChanged interface
             with the Serializable and DataContract attributes.
             </summary>
            
        </member>
        <member name="M:Cube.SerializableBase.#ctor">
            
             SerializableBase
            
             <summary>
             Initializes a new instance of the ObservableBase class.
             </summary>
            
        </member>
        <member name="M:Cube.SerializableBase.#ctor(Cube.Invoker)">
            
             SerializableBase
            
             <summary>
             Initializes a new instance of the ObservableBase class with
             the specified invoker.
             </summary>
            
             <param name="invoker">Invoker object.</param>
            
        </member>
        <member name="P:Cube.SerializableBase.Invoker">
            
             Invoker
            
             <summary>
             Gets or sets the invoker object.
             </summary>
            
        </member>
        <member name="E:Cube.SerializableBase.PropertyChanged">
            
             PropertyChanged
            
             <summary>
             Occurs when a property is changed.
             </summary>
            
        </member>
        <member name="M:Cube.SerializableBase.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            
             OnPropertyChanged
            
             <summary>
             Raises the PropertyChanged event with the provided arguments.
             </summary>
            
             <param name="e">Arguments of the event being raised.</param>
            
        </member>
        <member name="M:Cube.SerializableBase.Refresh(System.String,System.String[])">
            
             Refresh
            
             <summary>
             Notifies the update of the specified properties by raising
             the PropertyChanged event.
             </summary>
            
             <param name="name">Property name.</param>
             <param name="more">More property names.</param>
            
        </member>
        <member name="M:Cube.SerializableBase.GetProperty``1(System.Func{``0},System.String)">
            
             GetProperty
            
             <summary>
             Gets the value of the specified property name. The specified
             property will be initialized with the specified creator object
             as needed.
             </summary>
            
             <param name="creator">Function to create an initial value.</param>
             <param name="name">Name of the property.</param>
            
             <returns>Value of the property.</returns>
            
        </member>
        <member name="M:Cube.SerializableBase.GetProperty``1(System.String)">
            
             GetProperty
            
             <summary>
             Gets the value of the specified property name.
             </summary>
            
             <param name="name">Name of the property.</param>
            
             <returns>Value of the property.</returns>
            
        </member>
        <member name="M:Cube.SerializableBase.SetProperty``1(``0,System.String)">
            
             SetProperty
            
             <summary>
             Sets the specified value to the inner field of the specified
             name if they are not equal.
             </summary>
            
             <param name="value">Value being set.</param>
             <param name="name">Name of the property.</param>
            
             <returns>True for done; false for cancel.</returns>
            
        </member>
        <member name="M:Cube.SerializableBase.SetProperty``1(``0,System.Collections.Generic.IEqualityComparer{``0},System.String)">
            
             SetProperty
            
             <summary>
             Sets the specified value to the inner field of the specified
             name if they are not equal.
             </summary>
            
             <param name="value">Value being set.</param>
             <param name="compare">Function to compare.</param>
             <param name="name">Name of the property.</param>
            
             <returns>True for done; false for cancel.</returns>
            
        </member>
        <member name="M:Cube.SerializableBase.SetProperty``1(``0@,``0,System.String)">
            
             SetProperty
            
             <summary>
             Sets the specified value to the specified field if they are
             not equal.
             </summary>
            
             <param name="field">Reference to the target field.</param>
             <param name="value">Value being set.</param>
             <param name="name">Name of the property.</param>
            
             <returns>True for done; false for cancel.</returns>
            
        </member>
        <member name="M:Cube.SerializableBase.SetProperty``1(``0@,``0,System.Collections.Generic.IEqualityComparer{``0},System.String)">
            
             SetProperty
            
             <summary>
             Set the specified value in the specified field if they are not
             equal.
             </summary>
            
             <param name="field">Reference to the target field.</param>
             <param name="value">Value being set.</param>
             <param name="compare">Function to compare.</param>
             <param name="name">Name of the property.</param>
            
             <returns>True for done; false for cancel.</returns>
            
        </member>
        <member name="M:Cube.SerializableBase.OnDeserializing(System.Runtime.Serialization.StreamingContext)">
            
             OnDeserializing
            
             <summary>
             Occurs before deserializing.
             </summary>
            
        </member>
        <member name="M:Cube.SerializableBase.Reset(Cube.Invoker)">
            
             Reset
            
             <summary>
             Resets properties and fields.
             </summary>
            
        </member>
        <member name="T:Cube.SoftwareVersion">
            
             SoftwareVersion
            
             <summary>
             Represents the software version.
             </summary>
            
        </member>
        <member name="M:Cube.SoftwareVersion.#ctor(System.Reflection.Assembly)">
            
             SoftwareVersion
            
             <summary>
             Initializes a new instance of the class with the specified
             assembly.
             </summary>
            
             <param name="src">Assembly object.</param>
            
        </member>
        <member name="M:Cube.SoftwareVersion.#ctor(System.String)">
            
             SoftwareVersion
            
             <summary>
             Initializes a new instance of the class with the specified
             string.
             </summary>
            
             <param name="version">
             String value that represents the version.
             </param>
            
        </member>
        <member name="P:Cube.SoftwareVersion.Number">
            
             Number
            
             <summary>
             Gets or sets the value that represents the version number.
             </summary>
            
        </member>
        <member name="P:Cube.SoftwareVersion.Digit">
            
             Digit
            
             <summary>
             Gets or sets the number of significant digits of version.
             </summary>
            
             <remarks>
             2, 3, or 4 is available.
             </remarks>
            
        </member>
        <member name="P:Cube.SoftwareVersion.Prefix">
            
             Prefix
            
             <summary>
             Gets or sets the prefix of the version.
             </summary>
            
        </member>
        <member name="P:Cube.SoftwareVersion.Suffix">
            
             Suffix
            
             <summary>
             Gets or sets the suffix of the version.
             </summary>
            
        </member>
        <member name="P:Cube.SoftwareVersion.Architecture">
            
             Architecture
            
             <summary>
             Gets the architecture identification (32bit or 64bit).
             </summary>
            
        </member>
        <member name="M:Cube.SoftwareVersion.ToString">
            
             ToString
            
             <summary>
             Returns the string that represents the version without the
             platform identification.
             </summary>
            
             <returns>String for the version.</returns>
            
        </member>
        <member name="M:Cube.SoftwareVersion.ToString(System.Boolean)">
            
             ToString
            
             <summary>
             Returns the string that represents the version.
             </summary>
            
             <param name="platform">
             Indicates whether the platform identification is displayed.
             </param>
            
             <returns>String for the version.</returns>
            
        </member>
        <member name="M:Cube.SoftwareVersion.AppendNumber(System.Text.StringBuilder)">
            
             AppendNumber
            
             <summary>
             Appends the version number to the specified object.
             </summary>
            
        </member>
        <member name="M:Cube.SoftwareVersion.Append(System.Text.StringBuilder,System.String)">
            
             Append
            
             <summary>
             Appends the specified value.
             </summary>
            
        </member>
        <member name="T:Cube.StreamProxy">
            
             StreamProxy
            
             <summary>
             Provides a proxy of the original Stream instance.
             </summary>
            
        </member>
        <member name="M:Cube.StreamProxy.#ctor(System.IO.Stream)">
            
             StreamProxy
            
             <summary>
             Initializes a new instance of the StreamProxy class with the
             specified stream.
             </summary>
            
             <param name="stream">Original stream.</param>
            
        </member>
        <member name="M:Cube.StreamProxy.#ctor(System.IO.Stream,System.Boolean)">
            
             StreamProxy
            
             <summary>
             Initializes a new instance of the StreamProxy class with the
             specified parameters.
             </summary>
            
             <param name="stream">Original stream.</param>
             <param name="leaveOpen">
             true to leave the stream open after the StreamProxy object
             is disposed; otherwise, false.
             </param>
            
        </member>
        <member name="P:Cube.StreamProxy.CanRead">
            
             CanRead
            
             <summary>
             Gets a value indicating whether the current stream supports
             reading.
             </summary>
            
        </member>
        <member name="P:Cube.StreamProxy.CanSeek">
            
             CanSeek
            
             <summary>
             Gets a value indicating whether the current stream supports
             seeking.
             </summary>
            
        </member>
        <member name="P:Cube.StreamProxy.CanWrite">
            
             CanWrite
            
             <summary>
             Gets a value indicating whether the current stream supports
             writing.
             </summary>
            
        </member>
        <member name="P:Cube.StreamProxy.Length">
            
             Length
            
             <summary>
             Gets the length of the stream in bytes.
             </summary>
            
        </member>
        <member name="P:Cube.StreamProxy.Position">
            
             Position
            
             <summary>
             Gets or sets the current position within the stream.
             </summary>
            
        </member>
        <member name="M:Cube.StreamProxy.Flush">
            
             Flush
            
             <summary>
             Clears all buffers for this stream and causes any buffered
             data to be written to the underlying device.
             </summary>
            
        </member>
        <member name="M:Cube.StreamProxy.Seek(System.Int64,System.IO.SeekOrigin)">
            
             Seek
            
             <summary>
             Sets the position within the current stream.
             </summary>
            
        </member>
        <member name="M:Cube.StreamProxy.SetLength(System.Int64)">
            
             SetLength
            
             <summary>
             Sets the length of the current stream.
             </summary>
            
        </member>
        <member name="M:Cube.StreamProxy.Read(System.Byte[],System.Int32,System.Int32)">
            
             Read
            
             <summary>
             Reads a sequence of bytes from the current stream and advances
             the position within the stream by the number of bytes read.
             </summary>
            
        </member>
        <member name="M:Cube.StreamProxy.Write(System.Byte[],System.Int32,System.Int32)">
            
             Write
            
             <summary>
             writes a sequence of bytes to the current stream and advances
             the current position within this stream by the number of
             bytes written.
             </summary>
            
        </member>
        <member name="M:Cube.StreamProxy.Dispose(System.Boolean)">
            
             Dispose
            
             <summary>
             Releases the unmanaged resources used by the object
             and optionally releases the managed resources.
             </summary>
            
             <param name="disposing">
             true to release both managed and unmanaged resources;
             false to release only unmanaged resources.
             </param>
            
        </member>
        <member name="T:Cube.AsyncAction">
            
             AsyncAction
            
             <summary>
             Represents the method to invoke as an asynchronous method.
             </summary>
            
        </member>
        <member name="T:Cube.Synchronous">
            
             Synchronous
            
             <summary>
             Provides functionality to assist the synchronous methods.
             </summary>
            
        </member>
        <member name="M:Cube.Synchronous.AsTask(System.Action)">
            
             AsTask
            
             <summary>
             Impersonates the specified action to asynchronous action.
             </summary>
            
             <param name="src">Synchronous action.</param>
            
             <returns>Impersonated action.</returns>
            
        </member>
        <member name="T:Cube.TwiceException">
            
             TwiceException
            
             <summary>
             Represents the exception of executing twice.
             </summary>
            
        </member>
        <member name="M:Cube.TwiceException.#ctor">
            
             TwiceException
            
             <summary>
             Initializes a new instance of the TwiceException class.
             </summary>
            
        </member>
        <member name="T:Cube.WakeableTimer">
            
             WakeableTimer
            
             <summary>
             Represents the timer that suspends/resumes corresponding to the
             power mode.
             </summary>
            
        </member>
        <member name="M:Cube.WakeableTimer.#ctor">
            
             WakeableTimer
            
             <summary>
             Initializes a new instance of the WakeableTimer class.
             </summary>
            
        </member>
        <member name="M:Cube.WakeableTimer.#ctor(System.TimeSpan)">
            
             WakeableTimer
            
             <summary>
             Initializes a new instance of the WakeableTimer class with the
             specified interval.
             </summary>
            
             <param name="interval">Execution interval.</param>
            
        </member>
        <member name="P:Cube.WakeableTimer.State">
            
             State
            
             <summary>
             Gets the current timer state.
             </summary>
            
        </member>
        <member name="P:Cube.WakeableTimer.Interval">
            
             Interval
            
             <summary>
             Gets or sets the execution interval.
             </summary>
            
        </member>
        <member name="P:Cube.WakeableTimer.Last">
            
             Last
            
             <summary>
             Gets the last time to invoke the actions registered with the
             Subscribe method.
             </summary>
            
        </member>
        <member name="P:Cube.WakeableTimer.Next">
            
             Next
            
             <summary>
             Gets or sets the time when the registered actions are invoked
             next time.
             </summary>
            
        </member>
        <member name="P:Cube.WakeableTimer.Subscription">
            
             Subscriptions
            
             <summary>
             Gets the collection of subscriptions.
             </summary>
            
        </member>
        <member name="E:Cube.WakeableTimer.PowerModeChanged">
            
             PowerModeChanged
            
             <summary>
             Occurs when the power mode of the computer is changed.
             </summary>
            
        </member>
        <member name="M:Cube.WakeableTimer.OnPowerModeChanged(System.EventArgs)">
            
             OnPowerModeChanged
            
             <summary>
             Raises the PowerModeChanged event.
             </summary>
            
        </member>
        <member name="M:Cube.WakeableTimer.Reset">
            
             Reset
            
             <summary>
             Resets some condition.
             </summary>
            
        </member>
        <member name="M:Cube.WakeableTimer.Start">
            
             Start
            
             <summary>
             Starts or resumes the timer.
             </summary>
            
        </member>
        <member name="M:Cube.WakeableTimer.Start(System.TimeSpan)">
            
             Start
            
             <summary>
             Starts or resumes the timer with the specified time.
             </summary>
            
             <param name="delay">Initial delay.</param>
            
        </member>
        <member name="M:Cube.WakeableTimer.Stop">
            
             Stop
            
             <summary>
             Stops the timer.
             </summary>
            
        </member>
        <member name="M:Cube.WakeableTimer.Suspend">
            
             Suspend
            
             <summary>
             Suspends the timer.
             </summary>
            
        </member>
        <member name="M:Cube.WakeableTimer.Subscribe(Cube.AsyncAction)">
            
             Subscribe
            
             <summary>
             Sets the specified asynchronous action to the timer.
             </summary>
            
             <param name="callback">Asynchronous user action.</param>
            
             <returns>Object to remove from the subscription.</returns>
            
        </member>
        <member name="M:Cube.WakeableTimer.Dispose(System.Boolean)">
            
             Dispose
            
             <summary>
             Releases the unmanaged resources used by the WakeableTimer
             and optionally releases the managed resources.
             </summary>
            
             <param name="disposing">
             true to release both managed and unmanaged resources;
             false to release only unmanaged resources.
             </param>
            
        </member>
        <member name="M:Cube.WakeableTimer.OnReset">
            
             OnReset
            
             <summary>
             Resets inner fields.
             </summary>
            
        </member>
        <member name="M:Cube.WakeableTimer.Resume(System.TimeSpan)">
            
             Resume
            
             <summary>
             Resumes the timer.
             </summary>
            
             <param name="min">Minimum delay.</param>
            
        </member>
        <member name="M:Cube.WakeableTimer.Restart(System.DateTime)">
            
             Restart
            
             <summary>
             Restarts the timer.
             </summary>
            
             <remarks>
             原則としてユーザの設定したインターバルで実行を開始します。
             ただし、Subscribe で登録されているハンドラの総処理時間がユーザの
             設定したインターバルを超える場合、最低でもその 1/10 秒ほど間隔を
             あけて次回の処理を実行します。
             </remarks>
            
        </member>
        <member name="M:Cube.WakeableTimer.Restart(System.Double)">
            
             Restart
            
             <summary>
             Restarts the timer.
             </summary>
            
        </member>
        <member name="M:Cube.WakeableTimer.DoConstant(System.Object,System.Timers.ElapsedEventArgs)">
            
             DoConstant
            
             <summary>
             Occurs at the provided intervals.
             </summary>
            
        </member>
        <member name="T:Cube.TimerState">
            
             TimerState
            
             <summary>
             Specifies the timer state.
             </summary>
            
        </member>
        <member name="F:Cube.TimerState.Run">
            <summary>Run</summary>
        </member>
        <member name="F:Cube.TimerState.Stop">
            <summary>Stop</summary>
        </member>
        <member name="F:Cube.TimerState.Suspend">
            <summary>Suspend</summary>
        </member>
        <member name="F:Cube.TimerState.Unknown">
            <summary>Unknown</summary>
        </member>
    </members>
</doc>
